let cootModule,molecules_container,ccp4Module;importScripts("./wasm/moorhen.js"),importScripts("./wasm/web_example.js");const guid=()=>{var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var s=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?s:3&s|8).toString(16)}))};let print=e=>{console.log(e),postMessage({consoleMessage:JSON.stringify(e)})};const instancedMeshToMeshData=(e,t)=>{let s=[],a=[],o=[],r=[],n=[],i=[],l=[],c=[],d=[];const m=e.geom,_=e.markup,u=m.size();for(let e=0;e<u;e++){let _=[],u=[],p=[],g=[],h=[],y=[],f=[];const S=m.get(e),M=S.vertices,T=S.triangles,z=T.size();for(let e=0;e<z;e++){const s=T.get(e).point_id;t?(_.push(s[0]),_.push(s[2]),_.push(s[1])):(_.push(s[0]),_.push(s[1]),_.push(s[2]))}T.delete();const b=M.size();for(let e=0;e<b;e++){const t=M.get(e),s=t.pos;u.push(s[0]),u.push(s[1]),u.push(s[2]);const a=t.normal;p.push(a[0]),p.push(a[1]),p.push(a[2]),t.delete()}M.delete();const I=S.instancing_data_A,x=I.size();if(x>0)for(let e=0;e<x;e++){const t=I.get(e),s=t.position;y.push(s[0]),y.push(s[1]),y.push(s[2]);const a=t.colour;h.push(a[0]),h.push(a[1]),h.push(a[2]),h.push(a[3]);const o=t.size;g.push(o[0]),g.push(o[1]),g.push(o[2]),f.push(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),t.delete()}I.delete();const A=S.instancing_data_B,D=A.size();if(D>0)for(let e=0;e<D;e++){const t=A.get(e),s=t.position;y.push(s[0]),y.push(s[1]),y.push(s[2]);const a=t.colour;h.push(a[0]),h.push(a[1]),h.push(a[2]),h.push(a[3]);const o=t.size;g.push(o[0]),g.push(o[1]),g.push(o[2]);const r=t.orientation;f.push(r[0][0]),f.push(r[0][1]),f.push(r[0][2]),f.push(r[0][3]),f.push(r[1][0]),f.push(r[1][1]),f.push(r[1][2]),f.push(r[1][3]),f.push(r[2][0]),f.push(r[2][1]),f.push(r[2][2]),f.push(r[2][3]),f.push(r[3][0]),f.push(r[3][1]),f.push(r[3][2]),f.push(r[3][3]),t.delete()}A.delete(),S.delete(),o.push(p),a.push(u),s.push(_),r.push(g),i.push(y),l.push(f),n.push(h),c.push(!0),d.push("TRIANGLES")}m.delete();const p=simpleMeshToMeshData(_);return e.delete(),p.idx_tri.length>0&&p.idx_tri[0].length>0&&p.idx_tri[0][0].length>0?{prim_types:[d,p.prim_types[0]],idx_tri:[s,p.idx_tri[0]],vert_tri:[a,p.vert_tri[0]],norm_tri:[o,p.norm_tri[0]],col_tri:[n,p.col_tri[0]],instance_use_colors:[c,null],instance_sizes:[r,null],instance_origins:[i,null],instance_orientations:[l,null]}:{prim_types:[d],idx_tri:[s],vert_tri:[a],norm_tri:[o],col_tri:[n],instance_use_colors:[c],instance_sizes:[r],instance_origins:[i],instance_orientations:[l]}},simpleMeshToMeshData=(e,t)=>{const s=e.vertices,a=e.triangles;let o=[],r=[],n=[],i=[];const l=a.size();for(let e=0;e<l;e++){const s=a.get(e).point_id;t?o.push(s[0],s[2],s[1]):o.push(...s)}a.delete();const c=s.size();for(let e=0;e<c;e++){const a=s.get(e),o=a.pos,l=a.normal,c=a.color;r.push(...o),t?n.push(-l[0],-l[1],-l[2]):n.push(...l),i.push(...c),a.delete()}return s.delete(),e.delete(),{prim_types:[["TRIANGLES"]],idx_tri:[[o]],vert_tri:[[r]],norm_tri:[[n]],col_tri:[[i]]}},SuperposeResultsToJSArray=e=>{const t=e.alignment_info;return{referenceSequence:e.alignment.first,movingSequence:e.alignment.second,supperposeInfo:e.suppose_info,validationData:validationDataToJSArray(t)}},colourRulesToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},floatArrayToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},intArrayToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},stringArrayToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},symmetryToJSData=e=>{let t=[];console.log("DEBUG: in cootWorker helper function");const s=e.size();console.log(`DEBUG: the vector received from molecules_container.get_symmetry has a size of ${s}`);for(let a=0;a<s;a++){const s=e.get(a),o=s.first,r=s.second;t.push({x:o.x(),y:o.y(),z:o.z(),asString:o.symm_as_string,isym:o.isym(),us:r.us,ws:r.ws,vs:r.vs}),o.delete()}return e.delete(),t},mmrrccStatsToJSArray=e=>{const t=e=>{let t=[];const s=e.keys(),a=s.size();for(let o=0;o<a;o++){const a=s.get(o),r=e.get(a);t.push({resNum:a.res_no,insCode:a.ins_code,modelNumber:a.model_number,chainId:a.chain_id,n:r.n,correlation:r.correlation()}),a.delete(),r.delete()}return s.delete(),t},s=e.first,a=e.second,o={"All atoms":t(s),"Side-chains":t(a)};return s.delete(),a.delete(),o},residueSpecToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push({resNum:s.res_no,insCode:s.ins_code,modelNumber:s.model_number,chainId:s.chain_id}),s.delete()}return e.delete(),t},validationDataToJSArray=(e,t=null)=>{let s=[];const a=e.cviv,o=a.size();for(let e=0;e<o;e++){const o=a.get(e);if(null!==t&&o.chain_id!==t);else{const e=o.rviv,t=e.size();for(let a=0;a<t;a++){const t=e.get(a),o=t.residue_spec;s.push({chainId:o.chain_id,insCode:o.ins_code,seqNum:o.res_no,restype:"UNK",value:t.function_value}),t.delete(),o.delete()}e.delete()}o.delete()}return a.delete(),e.delete(),s},vectorHBondToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a),o={hb_hydrogen:s.hb_hydrogen,donor:s.donor,acceptor:s.acceptor,donor_neigh:s.donor_neigh,acceptor_neigh:s.acceptor_neigh,angle_1:s.angle_1,angle_2:s.angle_2,angle_3:s.angle_3,dist:s.dist,ligand_atom_is_donor:s.ligand_atom_is_donor,hydrogen_is_ligand_atom:s.hydrogen_is_ligand_atom,bond_has_hydrogen_flag:s.bond_has_hydrogen_flag};t.push(o)}return e.delete(),t},interestingPlaceDataToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a),o=s.residue_spec;t.push({chainId:o.chain_id,insCode:o.ins_code,seqNum:o.res_no,featureType:s.feature_type,featureValue:s.feature_value,buttonLabel:s.button_label,badness:s.badness,coordX:s.x,coordY:s.y,coordZ:s.z}),s.delete(),o.delete()}return e.delete(),t},ramachandranDataToJSArray=(e,t)=>{let s=[];const a=e.size();for(let o=0;o<a;o++){const a=e.get(o),r=a.phi_psi;r.chain_id===t&&s.push({chainId:r.chain_id,insCode:r.ins_code,seqNum:r.residue_number,restype:a.residue_name,isOutlier:!a.is_allowed_flag,phi:r.phi(),psi:r.psi(),is_pre_pro:"PRO"===a.residue_name}),a.delete(),r.delete()}return e.delete(),s},simpleMeshToLineMeshData=(e,t)=>{const s=e.vertices,a=e.triangles;let o=[],r=[],n=[],i=[];const l=a.size();for(let e=0;e<l;e++){const t=a.get(e).point_id;o.push(t[0],t[1],t[0],t[2],t[1],t[2])}a.delete();const c=s.size();for(let e=0;e<c;e++){const t=s.get(e);r.push(...t.pos),n.push(...t.normal),i.push(...t.color),t.delete()}return s.delete(),e.delete(),t?{prim_types:[["NORMALLINES"]],useIndices:[[!0]],idx_tri:[[o]],vert_tri:[[r]],additional_norm_tri:[[n]],norm_tri:[[n]],col_tri:[[i]]}:{prim_types:[["LINES"]],useIndices:[[!0]],idx_tri:[[o]],vert_tri:[[r]],norm_tri:[[n]],col_tri:[[i]]}},read_pdb=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.pdb`,e,!0,!0);const a=`./${s}.pdb`,o=molecules_container.read_pdb(a);return cootModule.FS_unlink(a),o},auto_open_mtz=e=>{const t=guid(),s=new Uint8Array(e);cootModule.FS_createDataFile(".",`${t}.mtz`,s,!0,!0);const a=`./${t}.mtz`,o=molecules_container.auto_read_mtz(a);return cootModule.FS_unlink(a),o},read_dictionary=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.cif`,e,!0,!0);const a=`./${s}.cif`,o=molecules_container.import_cif_dictionary(a,t);return cootModule.FS_unlink(a),o};function base64ToArrayBuffer(e){for(var t=window.atob(e),s=t.length,a=new Uint8Array(s),o=0;o<s;o++)a[o]=t.charCodeAt(o);return a.buffer}const replace_molecule_by_model_from_file=(e,t)=>{const s=`./${guid()}.pdb`;cootModule.FS_createDataFile(".",s,t,!0,!0);const a=molecules_container.replace_molecule_by_model_from_file(e,s);return cootModule.FS_unlink(s),a},new_positions_for_residue_atoms=(e,t)=>{let s=0;return t.forEach((t=>{if(t.length>0){const a=t[0].resCid;let o=new cootModule.Vectormoved_atom_t;t.forEach((e=>{const t=new cootModule.moved_atom_t(e.name,"",e.x,e.y,e.z,-1);o.push_back(t)}));const r=molecules_container.new_positions_for_residue_atoms(e,a,o);s+=r}})),s},read_mtz=(e,t,s)=>{const a=guid(),o=new Uint8Array(e);cootModule.FS_createDataFile(".",`${a}.mtz`,o,!0,!0);const r=`./${a}.mtz`,n=[r,s.F,s.PHI,"",!1,s.isDifference],i=molecules_container.read_mtz(...n);return cootModule.FS_unlink(r),i},associate_data_mtz_file_with_map=(e,t,s,a,o)=>{const r=new Uint8Array(t.data);cootModule.FS_createDataFile(".",`${t.fileName}.mtz`,r,!0,!0);const n=`./${t.fileName}.mtz`,i=[e,n,s,a,o];return molecules_container.associate_data_mtz_file_with_map(...i),n},read_ccp4_map=(e,t,s)=>{const a=guid(),o=new Uint8Array(e);cootModule.FS_createDataFile(".",`${a}.map`,o,!0,!0);const r=`./${a}.map`,n=[r,s],i=molecules_container.read_ccp4_map(...n);return cootModule.FS_unlink(r),i};onmessage=function(e){if("CootInitialize"===e.data.message)postMessage({message:"Initializing molecules_container"}),createRSRModule({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"moorhen.js",print,printErr:print}).then((t=>{cootModule=t,molecules_container=new cootModule.molecules_container_js,molecules_container.set_show_timings(!1),molecules_container.fill_rotamer_probability_tables(),molecules_container.set_map_sampling_rate(1.7),cootModule.FS.mkdir("COOT_BACKUP"),postMessage({consoleMessage:"Initialized molecules_container",message:e.data.message,messageId:e.data.messageId})})).catch((e=>{console.log(e),print(e)})),createCCP4Module({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"web_example.js",print,printErr:print}).then((t=>{ccp4Module=t,postMessage({consoleMessage:"Initialized ccp4Module",message:e.data.message})})).catch((e=>{console.log(e),print(e)}));else if("get_atoms"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"utf8"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched coordinates of molecule ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,pdbData:s}})}else if("get_mtz_data"===e.data.message){const t=cootModule.FS.readFile(e.data.fileName,{encoding:"binary"});postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched mtz data for map ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,mtzData:t}})}else if("get_map"===e.data.message){const t=`./${guid()}.map`;molecules_container.writeCCP4Map(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"binary"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched map of map ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,mapData:s.buffer}})}else if("read_mtz"===e.data.message)try{const t=guid();cootModule.FS_createDataFile(".",`${t}.mtz`,e.data.data,!0,!0,!0);const s=`./${t}.mtz`,a=molecules_container.read_mtz(s,"FWT","PHWT","",!1,!1);cootModule.FS_unlink(s),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Read map MTZ as molecule ${a}`,message:e.data.message,result:{molNo:a,name:e.data.name}})}catch(e){print(e)}else if("get_rama"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.getRamachandranData(t,e.data.chainId);cootModule.FS_unlink(t);let a=[];for(let e=0;e<s.size();e++){const t=s.get(e),o={chainId:t.chainId,insCode:t.insCode,seqNum:t.seqNum,restype:t.restype,phi:t.phi,psi:t.psi,isOutlier:t.isOutlier,is_pre_pro:t.is_pre_pro};a.push(o)}postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:a})}else if("copy_fragment"===e.data.message){const t=molecules_container.copy_fragment_using_residue_range(e.data.molNo,e.data.chainId,e.data.res_no_start,e.data.res_no_end);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}else if("delete"===e.data.message){const t=molecules_container.close_molecule(e.data.molNo);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}else if("delete_file_name"===e.data.message){const t=cootModule.FS_unlink(e.data.fileName);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}if("coot_command"===e.data.message){const{returnType:t,command:s,commandArgs:a,message:o,messageId:r,myTimeStamp:n}=e.data;try{let i,l;switch(i="shim_read_pdb"===s?read_pdb(...a):"shim_new_positions_for_residue_atoms"===s?new_positions_for_residue_atoms(...a):"shim_read_mtz"===s?read_mtz(...a):"shim_auto_open_mtz"===s?auto_open_mtz(...a):"shim_read_ccp4_map"===s?read_ccp4_map(...a):"shim_read_dictionary"===s?read_dictionary(...a):"shim_associate_data_mtz_file_with_map"===s?associate_data_mtz_file_with_map(...a):"shim_replace_molecule_by_model_from_file"===s?replace_molecule_by_model_from_file(...a):molecules_container[s](...a),t){case"instanced_mesh_perm":l=instancedMeshToMeshData(i,!0);break;case"symmetry":l=symmetryToJSData(i);break;case"mmrrcc_stats":l=mmrrccStatsToJSArray(i);break;case"colour_rules":l=colourRulesToJSArray(i);break;case"instanced_mesh":l=instancedMeshToMeshData(i);break;case"mesh_perm":l=simpleMeshToMeshData(i,!0);break;case"mesh":l=simpleMeshToMeshData(i);break;case"lit_lines_mesh":l=simpleMeshToLineMeshData(i,!0);break;case"lines_mesh":l=simpleMeshToLineMeshData(i,!1);break;case"float_array":l=floatArrayToJSArray(i);break;case"int_array":l=intArrayToJSArray(i);break;case"string_array":l=stringArrayToJSArray(i);break;case"residue_specs":l=residueSpecToJSArray(i);break;case"ramachandran_data":l=ramachandranDataToJSArray(i,e.data.chainID);break;case"validation_data":l=validationDataToJSArray(i,e.data.chainID);break;case"interesting_places_data":l=interestingPlaceDataToJSArray(i);break;case"superpose_results":l=SuperposeResultsToJSArray(i);break;case"vector_hbond":l=vectorHBondToJSArray(i);break;default:l=i}postMessage({returnType:t,command:s,message:o,messageId:r,myTimeStamp:n,consoleMessage:`Completed ${s} in ${Date.now()-e.data.myTimeStamp} ms`,result:{status:"Completed",result:l}})}catch(t){console.log(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,message:e.data.message,consoleMessage:`EXCEPTION RAISED IN ${s}, ${t}`,result:{status:"Exception"}})}}};