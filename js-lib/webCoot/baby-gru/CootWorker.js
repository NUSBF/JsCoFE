let cootModule,molecules_container,ccp4Module;importScripts("./wasm/moorhen.js"),importScripts("./wasm/web_example.js");const guid=()=>{var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var s=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?s:3&s|8).toString(16)}))};let print=e=>{console.log(e),postMessage({consoleMessage:JSON.stringify(e)})};const instancedMeshToMeshData=(e,t)=>{let s=[],o=[],a=[],n=[],r=[],i=[],l=[],c=[],d=[];const m=e.geom,_=e.markup,u=m.size();for(let e=0;e<u;e++){let _=[],u=[],p=[],g=[],h=[],f=[],y=[];const S=m.get(e),M=S.vertices,b=S.triangles,T=b.size();for(let e=0;e<T;e++){const s=b.get(e).point_id;t?(_.push(s[0]),_.push(s[2]),_.push(s[1])):(_.push(s[0]),_.push(s[1]),_.push(s[2]))}b.delete();const z=M.size();for(let e=0;e<z;e++){const t=M.get(e),s=t.pos;u.push(s[0]),u.push(s[1]),u.push(s[2]);const o=t.normal;p.push(o[0]),p.push(o[1]),p.push(o[2]),t.delete()}M.delete();const I=S.instancing_data_A,D=I.size();if(D>0)for(let e=0;e<D;e++){const t=I.get(e),s=t.position;f.push(s[0]),f.push(s[1]),f.push(s[2]);const o=t.colour;h.push(o[0]),h.push(o[1]),h.push(o[2]),h.push(o[3]);const a=t.size;g.push(a[0]),g.push(a[1]),g.push(a[2]),y.push(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),t.delete()}I.delete();const A=S.instancing_data_B,x=A.size();if(x>0)for(let e=0;e<x;e++){const t=A.get(e),s=t.position;f.push(s[0]),f.push(s[1]),f.push(s[2]);const o=t.colour;h.push(o[0]),h.push(o[1]),h.push(o[2]),h.push(o[3]);const a=t.size;g.push(a[0]),g.push(a[1]),g.push(a[2]);const n=t.orientation;y.push(n[0][0]),y.push(n[0][1]),y.push(n[0][2]),y.push(n[0][3]),y.push(n[1][0]),y.push(n[1][1]),y.push(n[1][2]),y.push(n[1][3]),y.push(n[2][0]),y.push(n[2][1]),y.push(n[2][2]),y.push(n[2][3]),y.push(n[3][0]),y.push(n[3][1]),y.push(n[3][2]),y.push(n[3][3]),t.delete()}A.delete(),S.delete(),a.push(p),o.push(u),s.push(_),n.push(g),i.push(f),l.push(y),r.push(h),c.push(!0),d.push("TRIANGLES")}m.delete();const p=simpleMeshToMeshData(_);return e.delete(),p.idx_tri.length>0&&p.idx_tri[0].length>0&&p.idx_tri[0][0].length>0?{prim_types:[d,p.prim_types[0]],idx_tri:[s,p.idx_tri[0]],vert_tri:[o,p.vert_tri[0]],norm_tri:[a,p.norm_tri[0]],col_tri:[r,p.col_tri[0]],instance_use_colors:[c,null],instance_sizes:[n,null],instance_origins:[i,null],instance_orientations:[l,null]}:{prim_types:[d],idx_tri:[s],vert_tri:[o],norm_tri:[a],col_tri:[r],instance_use_colors:[c],instance_sizes:[n],instance_origins:[i],instance_orientations:[l]}},simpleMeshToMeshData=(e,t)=>{const s=e.vertices,o=e.triangles;let a=[],n=[],r=[],i=[];const l=o.size();for(let e=0;e<l;e++){const s=o.get(e).point_id;t?a.push(s[0],s[2],s[1]):a.push(...s)}o.delete();const c=s.size();for(let e=0;e<c;e++){const o=s.get(e),a=o.pos,l=o.normal,c=o.color;n.push(...a),t?r.push(-l[0],-l[1],-l[2]):r.push(...l),i.push(...c),o.delete()}return s.delete(),e.delete(),{prim_types:[["TRIANGLES"]],idx_tri:[[a]],vert_tri:[[n]],norm_tri:[[r]],col_tri:[[i]]}},SuperposeResultsToJSArray=e=>{const t=e.alignment_info;return{referenceSequence:e.alignment.first,movingSequence:e.alignment.second,supperposeInfo:e.suppose_info,validationData:validationDataToJSArray(t)}},colourRulesToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o);t.push(s)}return e.delete(),t},floatArrayToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o);t.push(s)}return e.delete(),t},intArrayToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o);t.push(s)}return e.delete(),t},stringArrayToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o);t.push(s)}return e.delete(),t},symmetryToJSData=e=>{let t=[];const s=e.first,o=e.second,a=s.cell,n=s.symm_trans;console.log("DEBUG: in cootWorker helper function"),console.log(`DEBUG: the vector received from molecules_container?: ${n}`),console.log(`DEBUG: the cell received from molecules_container: ${a}`);const r=n.size();console.log(`DEBUG: the vector received from molecules_container.get_symmetry has a size of ${r}`);for(let e=0;e<r;e++){const s=n.get(e),a=s.first,r=s.second,i=o.get(e);t.push({x:a.x(),y:a.y(),z:a.z(),asString:a.symm_as_string,isym:a.isym(),us:r.us,ws:r.ws,vs:r.vs,matrix:i}),a.delete()}return a.delete(),n.delete(),o.delete(),s.delete(),t},mmrrccStatsToJSArray=e=>{const t=e=>{let t=[];const s=e.keys(),o=s.size();for(let a=0;a<o;a++){const o=s.get(a),n=e.get(o);t.push({resNum:o.res_no,insCode:o.ins_code,modelNumber:o.model_number,chainId:o.chain_id,n:n.n,correlation:n.correlation()}),o.delete(),n.delete()}return s.delete(),t},s=e.first,o=e.second,a={"All atoms":t(s),"Side-chains":t(o)};return s.delete(),o.delete(),a},residueSpecToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o);t.push({resNum:s.res_no,insCode:s.ins_code,modelNumber:s.model_number,chainId:s.chain_id}),s.delete()}return e.delete(),t},validationDataToJSArray=(e,t=null)=>{let s=[];const o=e.cviv,a=o.size();for(let e=0;e<a;e++){const a=o.get(e);if(null!==t&&a.chain_id!==t);else{const e=a.rviv,t=e.size();for(let o=0;o<t;o++){const t=e.get(o),a=t.residue_spec;s.push({chainId:a.chain_id,insCode:a.ins_code,seqNum:a.res_no,restype:"UNK",value:t.function_value}),t.delete(),a.delete()}e.delete()}a.delete()}return o.delete(),e.delete(),s},vectorHBondToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o),a={hb_hydrogen:s.hb_hydrogen,donor:s.donor,acceptor:s.acceptor,donor_neigh:s.donor_neigh,acceptor_neigh:s.acceptor_neigh,angle_1:s.angle_1,angle_2:s.angle_2,angle_3:s.angle_3,dist:s.dist,ligand_atom_is_donor:s.ligand_atom_is_donor,hydrogen_is_ligand_atom:s.hydrogen_is_ligand_atom,bond_has_hydrogen_flag:s.bond_has_hydrogen_flag};t.push(a)}return e.delete(),t},interestingPlaceDataToJSArray=e=>{let t=[];const s=e.size();for(let o=0;o<s;o++){const s=e.get(o),a=s.residue_spec;t.push({chainId:a.chain_id,insCode:a.ins_code,seqNum:a.res_no,featureType:s.feature_type,featureValue:s.feature_value,buttonLabel:s.button_label,badness:s.badness,coordX:s.x,coordY:s.y,coordZ:s.z}),s.delete(),a.delete()}return e.delete(),t},ramachandranDataToJSArray=(e,t)=>{let s=[];const o=e.size();for(let a=0;a<o;a++){const o=e.get(a),n=o.phi_psi;n.chain_id===t&&s.push({chainId:n.chain_id,insCode:n.ins_code,seqNum:n.residue_number,restype:o.residue_name,isOutlier:!o.is_allowed_flag,phi:n.phi(),psi:n.psi(),is_pre_pro:"PRO"===o.residue_name}),o.delete(),n.delete()}return e.delete(),s},simpleMeshToLineMeshData=(e,t)=>{const s=e.vertices,o=e.triangles;let a=[],n=[],r=[],i=[];const l=o.size();for(let e=0;e<l;e++){const t=o.get(e).point_id;a.push(t[0],t[1],t[0],t[2],t[1],t[2])}o.delete();const c=s.size();for(let e=0;e<c;e++){const t=s.get(e);n.push(...t.pos),r.push(...t.normal),i.push(...t.color),t.delete()}return s.delete(),e.delete(),t?{prim_types:[["NORMALLINES"]],useIndices:[[!0]],idx_tri:[[a]],vert_tri:[[n]],additional_norm_tri:[[r]],norm_tri:[[r]],col_tri:[[i]]}:{prim_types:[["LINES"]],useIndices:[[!0]],idx_tri:[[a]],vert_tri:[[n]],norm_tri:[[r]],col_tri:[[i]]}},read_pdb=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.pdb`,e,!0,!0);const o=`./${s}.pdb`,a=molecules_container.read_pdb(o);return cootModule.FS_unlink(o),a},auto_open_mtz=e=>{const t=guid(),s=new Uint8Array(e);cootModule.FS_createDataFile(".",`${t}.mtz`,s,!0,!0);const o=`./${t}.mtz`,a=molecules_container.auto_read_mtz(o);return cootModule.FS_unlink(o),a},read_dictionary=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.cif`,e,!0,!0);const o=`./${s}.cif`,a=molecules_container.import_cif_dictionary(o,t);return cootModule.FS_unlink(o),a};function base64ToArrayBuffer(e){for(var t=window.atob(e),s=t.length,o=new Uint8Array(s),a=0;a<s;a++)o[a]=t.charCodeAt(a);return o.buffer}const replace_molecule_by_model_from_file=(e,t)=>{const s=`./${guid()}.pdb`;cootModule.FS_createDataFile(".",s,t,!0,!0);const o=molecules_container.replace_molecule_by_model_from_file(e,s);return cootModule.FS_unlink(s),o},replace_map_by_mtz_from_file=(e,t,s)=>{const o=`./${guid()}.mtz`,a=new Uint8Array(t);cootModule.FS_createDataFile(".",o,a,!0,!0);const n=[e,o,s.F,s.PHI,"",!1],r=molecules_container.replace_map_by_mtz_from_file(...n);return cootModule.FS_unlink(o),r},new_positions_for_residue_atoms=(e,t)=>{let s=0;return t.forEach((t=>{if(t.length>0){const o=t[0].resCid;let a=new cootModule.Vectormoved_atom_t;t.forEach((e=>{const t=new cootModule.moved_atom_t(e.name,"",e.x,e.y,e.z,-1);a.push_back(t)}));const n=molecules_container.new_positions_for_residue_atoms(e,o,a);s+=n}})),s},read_mtz=(e,t,s)=>{const o=guid(),a=new Uint8Array(e);cootModule.FS_createDataFile(".",`${o}.mtz`,a,!0,!0);const n=`./${o}.mtz`,r=[n,s.F,s.PHI,"",!1,s.isDifference],i=molecules_container.read_mtz(...r);return cootModule.FS_unlink(n),i},associate_data_mtz_file_with_map=(e,t,s,o,a)=>{const n=new Uint8Array(t.data);cootModule.FS_createDataFile(".",`${t.fileName}.mtz`,n,!0,!0);const r=`./${t.fileName}.mtz`,i=[e,r,s,o,a];return molecules_container.associate_data_mtz_file_with_map(...i),r},read_ccp4_map=(e,t,s)=>{const o=guid(),a=new Uint8Array(e);cootModule.FS_createDataFile(".",`${o}.map`,a,!0,!0);const n=`./${o}.map`,r=[n,s],i=molecules_container.read_ccp4_map(...r);return cootModule.FS_unlink(n),i},doColourTest=e=>{console.log("DEBUG: Start test...");const t={0:{cid:"//A/1-10/",rgb:[255,0,0]},1:{cid:"//A/11-20/",rgb:[0,255,0]},2:{cid:"//A/21-30/",rgb:[0,0,255]}};let s=new cootModule.MapIntFloat3;for(const e in Object.keys(t))s[e]=t[e].rgb;let o=new cootModule.VectorStringUInt_pair;for(const e in Object.keys(t)){const s={first:t[e].cid,second:parseInt(e)};o.push_back(s)}console.log("DEBUG: Running molecules_container.set_user_defined_bond_colours"),molecules_container.set_user_defined_bond_colours(e,s),console.log("DEBUG: Running molecules_container.set_user_defined_atom_colour_by_residue"),molecules_container.set_user_defined_atom_colour_by_residue(e,o),o.delete(),s.delete()};onmessage=function(e){if("CootInitialize"===e.data.message)postMessage({message:"Initializing molecules_container"}),createRSRModule({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"moorhen.js",print,printErr:print}).then((t=>{cootModule=t,molecules_container=new cootModule.molecules_container_js,molecules_container.set_show_timings(!1),molecules_container.fill_rotamer_probability_tables(),molecules_container.set_map_sampling_rate(1.7),cootModule.FS.mkdir("COOT_BACKUP"),postMessage({consoleMessage:"Initialized molecules_container",message:e.data.message,messageId:e.data.messageId})})).catch((e=>{console.log(e),print(e)})),createCCP4Module({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"web_example.js",print,printErr:print}).then((t=>{ccp4Module=t,postMessage({consoleMessage:"Initialized ccp4Module",message:e.data.message})})).catch((e=>{console.log(e),print(e)}));else if("get_atoms"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"utf8"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched coordinates of molecule ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,pdbData:s}})}else if("get_mtz_data"===e.data.message){const t=cootModule.FS.readFile(e.data.fileName,{encoding:"binary"});postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched mtz data for map ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,mtzData:t}})}else if("get_map"===e.data.message){const t=`./${guid()}.map`;molecules_container.writeCCP4Map(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"binary"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched map of map ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,mapData:s.buffer}})}else if("read_mtz"===e.data.message)try{const t=guid();cootModule.FS_createDataFile(".",`${t}.mtz`,e.data.data,!0,!0,!0);const s=`./${t}.mtz`,o=molecules_container.read_mtz(s,"FWT","PHWT","",!1,!1);cootModule.FS_unlink(s),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Read map MTZ as molecule ${o}`,message:e.data.message,result:{molNo:o,name:e.data.name}})}catch(e){print(e)}else if("get_rama"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.getRamachandranData(t,e.data.chainId);cootModule.FS_unlink(t);let o=[];for(let e=0;e<s.size();e++){const t=s.get(e),a={chainId:t.chainId,insCode:t.insCode,seqNum:t.seqNum,restype:t.restype,phi:t.phi,psi:t.psi,isOutlier:t.isOutlier,is_pre_pro:t.is_pre_pro};o.push(a)}postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:o})}else if("copy_fragment"===e.data.message){const t=molecules_container.copy_fragment_using_residue_range(e.data.molNo,e.data.chainId,e.data.res_no_start,e.data.res_no_end);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}else if("delete"===e.data.message){const t=molecules_container.close_molecule(e.data.molNo);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}else if("delete_file_name"===e.data.message){const t=cootModule.FS_unlink(e.data.fileName);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}if("coot_command"===e.data.message){const{returnType:t,command:s,commandArgs:o,messageId:a}=e.data;try{const n=`Message from main thread to worker took ${Date.now()-e.data.myTimeStamp} ms (${s}) - (${a.slice(0,5)})`;let r,i=new Date;r="shim_read_pdb"===s?read_pdb(...o):"shim_new_positions_for_residue_atoms"===s?new_positions_for_residue_atoms(...o):"shim_read_mtz"===s?read_mtz(...o):"shim_auto_open_mtz"===s?auto_open_mtz(...o):"shim_read_ccp4_map"===s?read_ccp4_map(...o):"shim_read_dictionary"===s?read_dictionary(...o):"shim_associate_data_mtz_file_with_map"===s?associate_data_mtz_file_with_map(...o):"shim_replace_molecule_by_model_from_file"===s?replace_molecule_by_model_from_file(...o):"shim_replace_map_by_mtz_from_file"===s?replace_map_by_mtz_from_file(...o):"shim_do_colour_test"===s?doColourTest(...o):molecules_container[s](...o);let l=new Date,c=l-i;const d=`libcootAPI command ${s} took ${c} ms  - (${a.slice(0,5)})`;let m;switch(i=new Date,t){case"instanced_mesh_perm":m=instancedMeshToMeshData(r,!0);break;case"symmetry":m=symmetryToJSData(r);break;case"mmrrcc_stats":m=mmrrccStatsToJSArray(r);break;case"colour_rules":m=colourRulesToJSArray(r);break;case"instanced_mesh":m=instancedMeshToMeshData(r);break;case"mesh_perm":m=simpleMeshToMeshData(r,!0);break;case"mesh":m=simpleMeshToMeshData(r);break;case"lit_lines_mesh":m=simpleMeshToLineMeshData(r,!0);break;case"lines_mesh":m=simpleMeshToLineMeshData(r,!1);break;case"float_array":m=floatArrayToJSArray(r);break;case"int_array":m=intArrayToJSArray(r);break;case"string_array":m=stringArrayToJSArray(r);break;case"residue_specs":m=residueSpecToJSArray(r);break;case"ramachandran_data":m=ramachandranDataToJSArray(r,e.data.chainID);break;case"validation_data":m=validationDataToJSArray(r,e.data.chainID);break;case"interesting_places_data":m=interestingPlaceDataToJSArray(r);break;case"superpose_results":m=SuperposeResultsToJSArray(r);break;case"vector_hbond":m=vectorHBondToJSArray(r);break;default:m=r}l=new Date,c=l-i;const _=`conversion of output of ${s} to JS data took ${c} ms  - (${a.slice(0,5)})`;postMessage({timelibcootAPI:d,timeconvertingWASMJS:_,timeMainThreadToWorker:n,messageId:a,messageSendTime:Date.now(),consoleMessage:`Completed ${s} in ${Date.now()-e.data.myTimeStamp} ms`,result:{status:"Completed",result:m}})}catch(t){console.log(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,message:e.data.message,consoleMessage:`EXCEPTION RAISED IN ${s}, ${t}`,result:{status:"Exception"}})}}};