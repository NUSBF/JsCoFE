let cootModule,molecules_container,ccp4Module;importScripts("./wasm/moorhen.js"),importScripts("./wasm/web_example.js");const guid=()=>{var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var s=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?s:3&s|8).toString(16)}))};let print=e=>{console.log(e),postMessage({consoleMessage:JSON.stringify(e)})};const instancedMeshToMeshData=(e,t)=>{let s=[],a=[],o=[],n=[],i=[],r=[],c=[],l=[],d=[];const m=e.geom,u=m.size();for(let e=0;e<u;e++){let u=[],p=[],_=[],g=[],h=[],f=[],M=[];const y=m.get(e),S=y.vertices,T=y.triangles,I=T.size();for(let e=0;e<I;e++){const s=T.get(e).point_id;t?(u.push(s[0]),u.push(s[2]),u.push(s[1])):(u.push(s[0]),u.push(s[1]),u.push(s[2]))}T.delete();const z=S.size();for(let e=0;e<z;e++){const t=S.get(e),s=t.pos;p.push(s[0]),p.push(s[1]),p.push(s[2]);const a=t.normal;_.push(a[0]),_.push(a[1]),_.push(a[2]),t.delete()}S.delete();const x=y.instancing_data_A,b=x.size();if(b>0)for(let e=0;e<b;e++){const t=x.get(e),s=t.position;f.push(s[0]),f.push(s[1]),f.push(s[2]);const a=t.colour;h.push(a[0]),h.push(a[1]),h.push(a[2]),h.push(a[3]);const o=t.size;g.push(o[0]),g.push(o[1]),g.push(o[2]),M.push(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),t.delete()}x.delete();const w=y.instancing_data_B,A=w.size();if(A>0)for(let e=0;e<A;e++){const t=w.get(e),s=t.position;f.push(s[0]),f.push(s[1]),f.push(s[2]);const a=t.colour;h.push(a[0]),h.push(a[1]),h.push(a[2]),h.push(a[3]);const o=t.size;g.push(o[0]),g.push(o[1]),g.push(o[2]);const n=t.orientation;M.push(n[0][0]),M.push(n[0][1]),M.push(n[0][2]),M.push(n[0][3]),M.push(n[1][0]),M.push(n[1][1]),M.push(n[1][2]),M.push(n[1][3]),M.push(n[2][0]),M.push(n[2][1]),M.push(n[2][2]),M.push(n[2][3]),M.push(n[3][0]),M.push(n[3][1]),M.push(n[3][2]),M.push(n[3][3]),t.delete()}w.delete(),y.delete(),o.push(_),a.push(p),s.push(u),n.push(g),r.push(f),c.push(M),i.push(h),l.push(!0),d.push("TRIANGLES")}return m.delete(),e.delete(),{prim_types:[d],idx_tri:[s],vert_tri:[a],norm_tri:[o],col_tri:[i],instance_use_colors:[l],instance_sizes:[n],instance_origins:[r],instance_orientations:[c]}},simpleMeshToMeshData=e=>{const t=e.vertices,s=e.triangles;let a=[],o=[],n=[],i=[];const r=s.size();for(let e=0;e<r;e++){const t=s.get(e).point_id;a.push(...t)}s.delete();const c=t.size();for(let e=0;e<c;e++){const s=t.get(e),a=s.pos,r=s.normal,c=s.color;o.push(...a),n.push(...r),i.push(...c),s.delete()}return t.delete(),e.delete(),{prim_types:[["TRIANGLES"]],idx_tri:[[a]],vert_tri:[[o]],norm_tri:[[n]],col_tri:[[i]]}},floatArrayToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},stringArrayToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a);t.push(s)}return e.delete(),t},residueCodesToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++)t.push({resNum:e.get(a).first.res_no,resCode:e.get(a).second});return t.delete(),t},validationDataToJSArray=(e,t)=>{const s=e.get_index_for_chain(t),a=e.cviv,o=a.get(s),n=o.rviv;let i=[];const r=n.size();for(let e=0;e<r;e++){const t=n.get(e),s=t.residue_spec;i.push({chainId:s.chain_id,insCode:s.ins_code,seqNum:s.res_no,restype:"UNK",value:t.function_value}),t.delete(),s.delete()}return a.delete(),o.delete(),n.delete(),e.delete(),i},interestingPlaceDataToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a),o=s.residue_spec;t.push({chainId:o.chain_id,insCode:o.ins_code,seqNum:o.res_no,featureType:s.feature_type,featureValue:s.feature_value,buttonLabel:s.button_label,badness:s.badness,coordX:s.x,coordY:s.y,coordZ:s.z}),s.delete(),o.delete()}return e.delete(),t},ramachandranDataToJSArray=e=>{let t=[];const s=e.size();for(let a=0;a<s;a++){const s=e.get(a),o=s.phi_psi;t.push({chainId:o.chain_id,insCode:o.ins_code,seqNum:o.residue_number,restype:s.residue_name,isOutlier:!s.is_allowed_flag,phi:o.phi(),psi:o.psi(),is_pre_pro:"PRO"===s.residue_name}),s.delete(),o.delete()}return e.delete(),t},simpleMeshToLineMeshData=(e,t)=>{const s=e.vertices,a=e.triangles;let o=[],n=[],i=[],r=[];const c=a.size();for(let e=0;e<c;e++){const t=a.get(e).point_id;o.push(t[0],t[1],t[0],t[2],t[1],t[2])}a.delete();const l=s.size();for(let e=0;e<l;e++){const t=s.get(e);n.push(...t.pos),i.push(...t.normal),r.push(...t.color),t.delete()}return s.delete(),e.delete(),t?{prim_types:[["NORMALLINES"]],useIndices:[[!0]],idx_tri:[[o]],vert_tri:[[n]],additional_norm_tri:[[i]],norm_tri:[[i]],col_tri:[[r]]}:{prim_types:[["LINES"]],useIndices:[[!0]],idx_tri:[[o]],vert_tri:[[n]],norm_tri:[[i]],col_tri:[[r]]}},read_pdb=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.pdb`,e,!0,!0);const a=`./${s}.pdb`;console.log(`Off to read coords into coot ${a} ${t}`);const o=molecules_container.read_pdb(a);return console.log(`Read coordinates as molecule ${o}`),cootModule.FS_unlink(a),o},read_dictionary=(e,t)=>{const s=guid();cootModule.FS_createDataFile(".",`${s}.cif`,e,!0,!0);const a=`./${s}.cif`;console.log(`Off to read dictionary into coot ${a} ${t}`);const o=molecules_container.import_cif_dictionary(a,t);return console.log(`Read Dictionary with status ${o}`),cootModule.FS_unlink(a),o};function base64ToArrayBuffer(e){for(var t=window.atob(e),s=t.length,a=new Uint8Array(s),o=0;o<s;o++)a[o]=t.charCodeAt(o);return a.buffer}const new_positions_for_residue_atoms=(e,t)=>{console.log("committal",e,t);let s=0;return t.forEach((t=>{if(t.length>0){const a=t[0].resCid;let o=new cootModule.Vectormoved_atom_t;t.forEach((e=>{const t=new cootModule.moved_atom_t(e.name,"",e.x,e.y,e.z,-1);o.push_back(t)}));const n=molecules_container.new_positions_for_residue_atoms(e,a,o);s+=n}})),console.log("Success?",s),s},read_mtz=(e,t,s)=>{const a=guid(),o=new Uint8Array(e);cootModule.FS_createDataFile(".",`${a}.mtz`,o,!0,!0);const n=`./${a}.mtz`,i=[n,s.F,s.PHI,"",!1,s.isDifference],r=molecules_container.read_mtz(...i);return cootModule.FS_unlink(n),r},associate_data_mtz_file_with_map=(e,t,s,a,o)=>{const n=guid(),i=new Uint8Array(t.data);cootModule.FS_createDataFile(".",`${n}.mtz`,i,!0,!0);const r=[e,`./${n}.mtz`,s,a,o];return console.log("associate_data with args",{args:r}),molecules_container.associate_data_mtz_file_with_map(...r)},read_ccp4_map=(e,t,s)=>{const a=guid(),o=new Uint8Array(e);cootModule.FS_createDataFile(".",`${a}.map`,o,!0,!0);const n=`./${a}.map`,i=[n,s];console.log({read_map_args:i,length:o});const r=molecules_container.read_ccp4_map(...i);return console.log("Read map into number",r),cootModule.FS_unlink(n),r};onmessage=function(e){if("CootInitialize"===e.data.message)postMessage({message:"Initializing molecules_container"}),createRSRModule({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"moorhen.js",print,printErr:print}).then((t=>{cootModule=t,molecules_container=new cootModule.molecules_container_js,molecules_container.geometry_init_standard(),molecules_container.fill_rotamer_probability_tables(),molecules_container.set_map_sampling_rate(1.7),cootModule.FS.mkdir("COOT_BACKUP"),postMessage({consoleMessage:"Initialized molecules_container",message:e.data.message,messageId:e.data.messageId})})).catch((e=>{console.log(e),print(e)})),createCCP4Module({locateFile:e=>`./wasm/${e}`,onRuntimeInitialized:()=>{postMessage({message:"onRuntimeInitialized"})},mainScriptUrlOrBlob:"web_example.js",print,printErr:print}).then((t=>{ccp4Module=t,postMessage({consoleMessage:"Initialized ccp4Module",message:e.data.message})})).catch((e=>{console.log(e),print(e)}));else if("get_atoms"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"utf8"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched coordinates of molecule ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,pdbData:s}})}else if("get_map"===e.data.message){const t=`./${guid()}.map`;molecules_container.writeCCP4Map(e.data.molNo,t);const s=cootModule.FS.readFile(t,{encoding:"binary"});cootModule.FS_unlink(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Fetched map of map ${e.data.molNo}`,message:e.data.message,result:{molNo:e.data.molNo,mapData:s.buffer}})}else if("read_mtz"===e.data.message)try{const t=guid();cootModule.FS_createDataFile(".",`${t}.mtz`,e.data.data,!0,!0,!0);const s=`./${t}.mtz`,a=molecules_container.read_mtz(s,"FWT","PHWT","",!1,!1);cootModule.FS_unlink(s),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,consoleMessage:`Read map MTZ as molecule ${a}`,message:e.data.message,result:{molNo:a,name:e.data.name}})}catch(e){print(e)}else if("get_rama"===e.data.message){const t=`./${guid()}.pdb`;molecules_container.writePDBASCII(e.data.molNo,t);const s=cootModule.getRamachandranData(t,e.data.chainId);cootModule.FS_unlink(t);let a=[];for(let e=0;e<s.size();e++){const t=s.get(e),o={chainId:t.chainId,insCode:t.insCode,seqNum:t.seqNum,restype:t.restype,phi:t.phi,psi:t.psi,isOutlier:t.isOutlier,is_pre_pro:t.is_pre_pro};a.push(o)}postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:a})}else if("copy_fragment"===e.data.message){const t=molecules_container.copy_fragment_using_residue_range(e.data.molNo,e.data.chainId,e.data.res_no_start,e.data.res_no_end);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}else if("delete"===e.data.message){const t=molecules_container.close_molecule(e.data.molNo);postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,messageTag:"result",result:t})}if("coot_command"===e.data.message){const{returnType:t,command:s,commandArgs:a,message:o,messageId:n,myTimeStamp:i}=e.data;try{let r,c;switch(r="shim_read_pdb"===s?read_pdb(...a):"shim_new_positions_for_residue_atoms"===s?new_positions_for_residue_atoms(...a):"shim_read_mtz"===s?read_mtz(...a):"shim_read_ccp4_map"===s?read_ccp4_map(...a):"shim_read_dictionary"===s?read_dictionary(...a):"shim_associate_data_mtz_file_with_map"===s?associate_data_mtz_file_with_map(...a):molecules_container[s](...a),t){case"instanced_mesh_perm":c=instancedMeshToMeshData(r,!0);break;case"instanced_mesh":c=instancedMeshToMeshData(r);break;case"mesh":c=simpleMeshToMeshData(r);break;case"lit_lines_mesh":c=simpleMeshToLineMeshData(r,!0);break;case"lines_mesh":c=simpleMeshToLineMeshData(r,!1);break;case"float_array":c=floatArrayToJSArray(r);break;case"string_array":c=stringArrayToJSArray(r);break;case"residue_codes":c=residueCodesToJSArray(r);break;case"ramachandran_data":c=ramachandranDataToJSArray(r);break;case"validation_data":c=validationDataToJSArray(r,e.data.chainID);break;case"interesting_places_data":c=interestingPlaceDataToJSArray(r);break;default:c=r}postMessage({returnType:t,command:s,message:o,messageId:n,myTimeStamp:i,consoleMessage:`Completed ${s} in ${Date.now()-e.data.myTimeStamp} ms`,result:{status:"Completed",result:c}})}catch(t){console.log(t),postMessage({messageId:e.data.messageId,myTimeStamp:e.data.myTimeStamp,message:e.data.message,consoleMessage:`EXCEPTION RAISED IN ${s}, ${t}`,result:{status:"Exception"}})}}};