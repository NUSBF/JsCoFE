.. _custom_workflows:

=======================================
Custom (User-Created) Project Workflows
=======================================

CCP4 Cloud projects can be developed automatically using one of the predefined 
:ref:`automatic workflows`, as well as custom workflows
created by the user.

.. _automatic workflows:

.. _custom_workflows_use:


What Are Custom Workflows, and How Can You Use Them?
-----------------------------------------------------

A custom workflow is a script (*WScript*) that outlines the tasks to be performed 
and the sequence of their execution, *i.e.*, the workflow algorithm. This script 
is stored in a plain text file with the extension ``.wscript``, which can be created 
using most text editors, such as *vim*, *nano*, *notepad* (Windows), *TextEdit* (Mac), 
and similar programs. If you're using advanced editors like *MS Word* or *LibreOffice* 
(not recommended), ensure the file is saved as "plain text."

You can initiate a custom workflow in one of three ways:

* **Import a .wscript file along with other necessary files**  
  Files such as ``.mtz`` (reflections, phases), ``.pdb``, ``.mmcif`` (structure models), 
  ``.cif`` (ligand descriptions), ``.lib`` (restraint libraries), and ``.seq`` can be 
  included in a *single* import task. If the *WScript* is correct and all required data 
  files are provided, the workflow will start automatically upon import.

* **Add .wscript files to the data set in a CloudRun command file**  
  Use the generic **FILE** keyword, select the **import task**, and execute the ``CloudRun`` utility. All files will be uploaded to CCP4 Cloud, 
  a project will be created, and the workflow will start automatically.

* **Add *WScript* to the *My Workflows* list**  
  In the *Workflows* tab of the *Task List*, you can include the *WScript* in your 
  *My Workflows* list, allowing it to be used as a standard task in the system.


-------------------------------------
Writing the Workflow Script (WScript)
-------------------------------------

The main purpose of workflows is to automate operations when the same project 
(or a branch of a project) needs to be repeated multiple times (potentially 
hundreds) with different input data. **WScript** is specifically designed for 
this purpose.

The easiest way to create a **WScript** file is by using the 
**Workflow Creator** in CCP4 Cloud. Log in to your account, open the 
**Task List** in any project, and navigate to the **Workflows** tab. Scroll 
to the **My Workflows** section at the bottom and click the **Add Workflow** 
button. This opens the **Workflow Creator** window with a template script 
loaded.

It is a good idea to save the newly created workflow in your personal library. 
Assign a unique *Workflow ID* at the top of the dialog window. To make the 
workflow easier to identify in your **My Workflows** library, you can also 
change the color of the workflow icon by clicking on it and selecting from 
the available options. Once done, save the script. It will now appear in the 
**My Workflows** section of the **Task List**. While you can run it as any 
other task, doing so with the template alone will result in an empty 
**Job Dialog**, as the template does not perform any tasks.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adding Functionality to the Workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To give the workflow useful functionality, click the **Edit** button next to 
the newly created workflow in the **My Workflows** section. This will reopen 
the **Workflow Creator**, displaying the content of the template script, 
which may look like this: ::

    #
    # * THIS IS A WORKFLOW SCRIPT TEMPLATE
    # * DO NOT ASSUME THAT IT IS FUNCTIONAL WITHOUT EDITING
    # * CONSULT DOCUMENTATION
    #

    # -----------------------------------------------------
    # Give Workflow Title here
    # -----------------------------------------------------
    # Sun Dec 31 2023
    #

    VERSION  1.0    # script version for backward compatibility
    DEBUG    OFF    # ON/OFF
    COMMENTS ON     # ON/OFF
    WID      d-imp  # (optional) workflow ID for import mode

    # ==========================================================================
    # Workflow header -- EDIT AS NECESSARY

    # General workflow descriptors
    NAME     my workflow             # to show in Job Tree
    ONAME    my_wflow                # to use for naming output files
    TITLE    My Workflow Title       # to display in Task List
    DESC     my workflow description # to display in Task List
    ICON     Maraschino              # (optional) workflow icon colour
    KEYWORDS my own workflow         # for using in A-Z keyword search

    ALLOW_UPLOAD       # create file upload widgets if started from project root

    # ==========================================================================
    # Input data section. List all data required, "!" specifies mandatory items.
    # Edit template statements below as necessary:

    # !DATA HKL UNMERGED TYPES anomalous
    # !DATA XYZ          TYPES protein dna rna
    # DATA LIBRARY
    # DATA SEQ           TYPES protein dna rna
    # DATA LIGAND

    # ==========================================================================
    # Workflow parameters section. List all parameters required, "!" specifies
    # mandatory items. Edit template statements below as necessary:

    # !PAR_INTEGER nCycles  # variable name to be used in workflow's expressions
    #    LABEL     Number of cycles
    #    TOOLTIP   Number of refinement cycles
    #    IWIDTH    40        # (optional) input field width is set to 40 pixels
    #    RANGE     0 50      # (optional) allowed min/max values
    #    DEFAULT   10        # (optional) default integer value

    # PAR_REAL     resHigh   # variable name to be used in workflow's expressions
    #    LABEL     High resolution cut-off (&Aring;)
    #    TOOLTIP   High resolution cut-off, angstrom
    #    IWIDTH    40        # input field width is set to 40 pixels
    #    RANGE     0.1 5.0   # allowed min/max values
    #    DEFAULT   1.5       # default real value

    # !PAR_STRING  atomType  # variable name to be used in workflow's expressions
    #    LABEL     Anomalous scatterer
    #    TOOLTIP   Expected main anomalous scatterer
    #    IWIDTH    20        # input field width is set to 20 pixels
    #    MAXLENGTH 2         # (optional) maximum 2 characters
    #    DEFAULT   Se        # (optional) default string value "Se"

    # PAR_CHECK    reqValReport # variable name to be used in workflow's expressions
    #    LABEL     Request PDB Validation Report
    #    TOOLTIP   Check if deposition files should be prepared and PDB validation report obtained
    #    DEFAULT   Unchecked

    # PAR_COMBO   useBFactors # variable name to be used in workflow's expressions
    #    LABEL     Use isotropic B-factors
    #    TOOLTIP   B-factor mode for refinement
    #    IWIDTH    60        # input field width is set to 60 pixels
    #    OPTION    none  Select from list  # value "none" text "Select from list" 
    #    OPTION    yes   Yes               # value "yes"  text "Yes"
    #    OPTION    no    No                # value "no"  text  "No"
    #    DEFAULT   none                    # default string value "none"

    # ==========================================================================
    # Workflow run body

In **WScript**, all text following the hash "#" symbol is a comment and can be 
safely removed if desired. While you may delete some of the initial template 
lines, it is generally recommended to keep ample comments in the script. 
Comments make the script more understandable and easier to maintain.

You can format the script with spaces according to your aesthetic preferences. 
When spaces are required as separators, any number of spaces is acceptable. 

**WScript** relies on single-line statements containing keywords and values. 
Keywords, which usually begin **WScript** statements, are case-insensitive. 
In contrast, values must respect case sensitivity. A full list of keywords is 
provided at the end of this document.

We will now proceed to create a new workflow in several steps.

.. _simple_mr_workflow:

~~~~~~~~~~~~~~~~~~
Simple MR Workflow
~~~~~~~~~~~~~~~~~~

As a first example, letâ€™s create a simple workflow that takes reflection data, 
a structure template, and a sequence to solve a structure using Molecular 
Replacement with Molrep.

**Setting Up the Workflow Header**

To begin, remove any unnecessary lines and add meaningful annotations to the 
header section of the **WScript** file. The workflow header should look like 
this: ::

    #
    # -----------------------------------------------------
    # Molecular Replacement with Molrep
    # -----------------------------------------------------
    # Sun Dec 31 2023
    #

    VERSION  1.0    # script version for backward compatibility
    DEBUG    OFF    # ON/OFF
    COMMENTS ON     # ON/OFF

    # ==========================================================================
    # Workflow header

    # General workflow descriptors
    NAME     molrep workflow         # to show in Job Tree
    ONAME    mrp_wflow               # to use for naming output files
    TITLE    Molrep-based Workflow   # to display in Task List
    DESC     takes HKL, XYZ and SEQ and solves structure with Molrep
    ICON     Maraschino              # (optional) workflow icon colour
    KEYWORDS molrep workflow         # for using in A-Z keyword search

    ALLOW_UPLOAD       # create file upload widgets if started from project root

You can now save the workflow and check its updated description in the 
**My Workflows** list. Reopen it by clicking the relevant **Edit** button.

**Specifying Input Data**

Next, define the data required by the workflow in the **WScript** input data 
section. Append the following statements to the script: ::

    # ==========================================================================
    # Input data section. List all data required, "!" specifies mandatory items.

    !DATA HKL
    !DATA XYZ  TYPES protein
    !DATA SEQ  TYPES protein

These lines indicate that the workflow requires three mandatory inputs: 
reflection data (HKL), a search model (XYZ, which must be a protein chain), 
and a sequence (SEQ, also of the amino acid type). 

To see how this works, save the script and create a new task from the root of 
your project. Input fields for these data files should appear. For further 
verification, run the Cloudâ€™s **File Import** task to import the necessary 
files, then append your workflow as the next task. You will see selectors for 
the imported data. Although you can run the workflow at this stage, it will 
fail because no tasks have been defined in the **WScript** yet.

**Defining the Workflow Tasks**

We now aim to create a sequence of at least five tasks:

1. Prepare the MR model.
2. Define the ASU.
3. Run Molrep.
4. Rebuild the model using, for example, Modelcraft.
5. Refine the structure with Refmac.

Reopen the Molrep workflow script in the **Workflow Creator**. At the bottom 
of the dialog window, click **Add Task**, then select *"Model Preparation XYZ"* 
from the dropdown menu in the header. The dialog will populate with default task 
options similar to those in the original task interfaces. Adjust the options as 
needed, set their values, and click **Add to Workflow**. This will append the 
following block to the script: ::

    @MODELPREPXYZ
        RUN ModelPrepXYZ

If you modify a task parameter (e.g., change *"Modification protocol"* to 
*"PDB Clip"*), the block will appear slightly different: ::

    @MODELPREPXYZ
        PARAMETER MODIFICATION_SEL D  # Modification protocol
        RUN ModelPrepXYZ

This demonstrates how CCP4 Cloud tasks are described in custom workflows. Each 
task is defined by a block of lines starting with a unique alphanumeric 
identifier preceded by the "@" symbol (e.g., `@MODELPREPXYZ`). The block ends 
with the `RUN` statement. Only non-default parameter values need to be specified 
to keep the script concise. For more details, refer to the :ref:`wscript_reference` 
section.

Following this approach, you can now add tasks for *"ASU Definition"*, *"Molrep"*, 
*"Modelcraft"*, and *"Refmac"*, in that order. The final **WScript** will resemble 
the following: ::

    #
    # -----------------------------------------------------
    # Molecular Replacement with Molrep
    # -----------------------------------------------------
    # Sun Dec 31 2023
    #

    VERSION  1.0    # script version for backward compatibility
    DEBUG    OFF    # ON/OFF
    COMMENTS ON     # ON/OFF

    # ==========================================================================
    # Workflow header

    # General workflow descriptors
    NAME     molrep workflow         # to show in Job Tree
    ONAME    mrp_wflow               # to use for naming output files
    TITLE    Molrep-based Workflow   # to display in Task List
    DESC     takes HKL, XYZ and SEQ and solves structure with Molrep
    ICON     Maraschino              # (optional) workflow icon colour
    KEYWORDS molrep workflow         # for using in A-Z keyword search

    ALLOW_UPLOAD       # create file upload widgets if started from project root

    # ==========================================================================
    # Input data section. List all data required, "!" specifies mandatory items.

    !DATA HKL
    !DATA XYZ  TYPES protein
    !DATA SEQ  TYPES protein

    # ==========================================================================
    # Workflow parameters section. List all parameters required, "!" specifies
    # mandatory items.

    # ==========================================================================
    # Workflow run body

    @MODELPREPXYZ
        RUN ModelPrepXYZ
    #

    @ASUDEF
        RUN ASUDef
    #

    @MOLREP
        RUN Molrep
    #

    @MODELCRAFT
        RUN ModelCraft
    #

    @REFMAC
        RUN Refmac
    #

**Running the Workflow**

This script defines a fully functional workflow. You can now run it using any 
of the three methods described in :ref:`custom_workflows_use`. If you want to 
use it with the **Import** task or **CloudRun** utility, copy and paste the 
**WScript** from the **Workflow Creator** into an external file with the 
``.wscript`` extension.

.. note::
   Unlike manually developed CCP4 Cloud projects, where tasks cannot be created 
   without suitable data, workflows do not enforce task order or data flow 
   correctness. It is essential to understand the proper task sequence for your 
   objectives or to base it on a manually developed project that represents your 
   intended workflow design.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Conditional Statements and Other Advanced Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our current Molrep workflow is straightforward in terms of input data and 
algorithm. To enhance its flexibility, we can modify it to:

- Accept both merged and unmerged reflection data as input.  
- Optimize refinement parameters.  
- Optionally prepare files for PDB deposition based on the best results achieved.

**Conditions Based on Data Availability**

Letâ€™s begin by enabling the workflow to accept optional unmerged reflection data. 
Update the ``DATA`` statement as follows: ::

    !DATA HKL UNMERGED
    !DATA XYZ  TYPES protein
    !DATA SEQ  TYPES protein

Next, include the *"Aimless"* task to scale and merge unmerged reflections before 
they are used. This task must be placed before *ASU Definition* or 
*Model Preparation XYZ*. To do this:

1. Open the workflow's **WScript** in **Workflow Creator**.  
2. Place the cursor on the line above the ``@MODELPREPXYZ`` line.  
3. Click **Insert Task**, select the *"Aimless"* task, and click **Insert in Workflow**.

The workflow body will be updated as follows: ::

    # ==========================================================================
    # Workflow Run Body

    @AIMLESS
        DATA      ds0  unmerged
        RUN Aimless
    #

    @MODELPREPXYZ
        RUN ModelPrepXYZ
    #

    @ASUDEF
        RUN ASUDef
    #

If the workflow receives unmerged reflections, this configuration works fine. 
However, if merged reflections are supplied, the *"Aimless"* task will fail. 
To handle this, add an ``IFDATA`` statement to conditionally run the *"Aimless"* 
task: ::

    @AIMLESS
        IFDATA    unmerged
        DATA      ds0  unmerged
        RUN Aimless
    #

.. note::
   In the ``IFDATA`` statement, ``unmerged`` must be in lowercase.

To perform a task only when data is unavailable, use the ``IFNOTDATA`` statement. 
For example: ::

    @AIMLESS
        IFNOTDATA hkl
        DATA      ds0  unmerged
        RUN Aimless
    #

.. note::
   Data names in ``IFDATA`` and ``IFNOTDATA`` correspond to the lowercase 
   versions of their types in ``DATA`` statements (e.g., ``hkl``, ``unmerged``, 
   ``xyz``, ``seq``). Refer to :ref:`wscript_reference` for more details.

**Looping and Branching**

Some tasks may need to run repeatedly with varying parameters. For example, you 
might want the *"Refmac"* task to iterate until no suggested parameters remain 
or until the number of runs exceeds a certain limit (e.g., 5). The following 
fragment demonstrates this: ::

    # Initialize loop control parameters

    let iter   = 1     # Iteration serial number
    let iter0  = 0     # Iteration with the lowest Rfree
    let Rfree0 = 1.0   # Lowest Rfree achieved

    @REFINE-OPT[iter]  # [iter] modifies the RUN NAME to ensure uniqueness
        USE_SUGGESTED_PARAMETERS   # Use suggested parameters or defaults if none
        RUN       Refmac

    # Capture iteration with the lowest Rfree
    let iter0 = iter; Rfree0 = Rfree  if  Rfree < Rfree0
    let iter  = iter + 1

    # Continue iterating if conditions are met
    repeat @REFINE-OPT while suggested > 0 and iter < 5 

    # Branch to iteration with the lowest Rfree
    branch @REFINE-OPT[iter0]

In this example:

- ``Rfree`` is a predefined variable representing the achieved *R_free*.  
- ``suggested`` is the number of suggested parameter changes for *Refmac*.  

By appending a task such as *"PDB Validation Report"*, the results from the 
iteration with the lowest *R_free* will be used.

**Workflow Parameters**

Workflow parameters allow users to adjust settings such as resolution cutoff or 
task inclusion. To add user-configurable parameters, define them in the 
**Workflow Parameters Section**: ::

    PAR_REAL      resHigh   # Internal variable for resolution cutoff
        LABEL     High resolution cut-off (&Aring;)
        TOOLTIP   Specify the high-resolution cutoff in angstroms
        IWIDTH    40
        RANGE     0.1 5.0
        DEFAULT   1.5

    PAR_CHECK     runModelcraft  # Internal variable for Modelcraft inclusion
        LABEL     Re-build model
        TOOLTIP   Enable phased model rebuilding
        DEFAULT   Checked

These parameters create graphical widgets in the workflow interface. For instance, 
the ``resHigh`` variable can set the resolution cutoff for *Aimless*: ::

    @AIMLESS
        IFDATA    unmerged
        DATA      ds0  unmerged
        PARAMETER RESO_HIGH resHigh  # High-resolution cutoff (&Aring;)
        RUN Aimless
    #

For the *Modelcraft* task, use the ``runModelcraft`` flag: ::

    @MODELCRAFT
        IF runModelcraft
        RUN ModelCraft
    #

.. note::
   Variables can include expressions (e.g., ``2 * resHigh`` or ``max(1.5, resHigh)``).

**Final Workflow Example**

Below is the complete **WScript** for the enhanced Molrep workflow: ::

    # ==========================================================================
    # Workflow Header

    NAME     Molrep Workflow
    ONAME    mrp_wflow
    TITLE    Molrep-based Workflow
    DESC     Solves structure using Molrep
    ICON     Maraschino
    KEYWORDS molrep workflow

    ALLOW_UPLOAD

    # ==========================================================================
    # Input Data Section

    !DATA HKL
    !DATA XYZ  TYPES protein
    !DATA SEQ  TYPES protein

    # ==========================================================================
    # Workflow Parameters Section

    PAR_REAL      resHigh
        LABEL     High resolution cut-off (&Aring;)
        TOOLTIP   Specify resolution cutoff in angstroms
        IWIDTH    40
        RANGE     0.1 5.0
        DEFAULT   1.5

    PAR_CHECK     runModelcraft
        LABEL     Re-build model
        TOOLTIP   Enable phased model rebuilding
        DEFAULT   Checked

    # ==========================================================================
    # Workflow Run Body

    @AIMLESS
        IFDATA    unmerged
        DATA      ds0  unmerged
        PARAMETER RESO_HIGH resHigh
        RUN Aimless
    #

    @MODELPREPXYZ
        RUN ModelPrepXYZ
    #

    @ASUDEF
        RUN ASUDef
    #

    @MOLREP
        RUN Molrep
    #

    @MODELCRAFT
        IF runModelcraft
        RUN ModelCraft
    #

    # Looping and Refinement

    let iter   = 1
    let iter0  = 0
    let Rfree0 = 1.0

    @REFINE-OPT[iter]
        USE_SUGGESTED_PARAMETERS
        RUN Refmac

    let iter0 = iter; Rfree0 = Rfree  if  Rfree < Rfree0
    let iter  = iter + 1

    repeat @REFINE-OPT while suggested > 0 and iter < 5
    branch @REFINE-OPT[iter0]

    @PDBVAL
        RUN PDBVal
    #

.. note::
   Workflows with input parameters cannot be used in the *Import* task or 
   *CloudRun* utility.


-----------------------
Custom Workflow Library
-----------------------

CCP4 Cloud includes a library of custom workflows, providing **WScript** examples 
for a variety of common scenarios. These workflows serve as practical starting 
points and templates for your own custom developments.

To access and use these workflows:

1. Open the **Workflow Creator**.  
2. Click the **Library** button.  
3. Browse and select a suitable **WScript** template.  

Once selected, the **WScript** can be customized to fit your specific requirements. 
Simply edit it as you would any text file.

.. _wscript_reference:

-----------------
WScript Reference
-----------------

**WScript** file consists of four **sections**, which must follow the order 
presented in this reference. Each section contains a specific set of **WScript** 
statements; no statement from one section can appear in another one. Section 
separators are not used; **WScript** recognizes sections automatically. 
Only :ref:`wscript_reference_input_parameters` can be empty.

All **WScript** **statements** occupy a single line. Statements start with a 
case-insensitive primary key, which may be followed by additional case-insensitive 
key(s) and values. Any number of consecutive spaces is equivalent to one space, 
except when these spaces occur in string-type values. Part of a line starting 
from a hash sign "#" is considered a comment and is ignored; empty lines are 
ignored too.

Some **WScript** constructs are made of several statements, which must be placed 
on consecutive lines (comments and empty lines ignored). Such constructs have 
mandatory leading and trailing statements, while other statements can be placed 
in arbitrary order.

**WScript** supports pre-defined and user-defined variables, which can hold real, 
integer, boolean, and string values. String literals must be double-quoted 
(*e.g.*, "this is a string literal"), and boolean literals are case-sensitive 
(`True` and `False`). Pre-defined variables get their values from completed 
tasks; see details in :ref:`wscript_reference_predefined_variables`.

Wherever a variable's value is used, any in-line expression can be placed instead, 
which may also include other variables. A reference to a variable's value should 
be viewed as a computable trivial expression made of a single variable. See 
available functions, constants, and operators 
in :ref:`wscript_reference_expression_syntax`.

.. _wscript_reference_header:

~~~~~~~~~~~~~~
Header section
~~~~~~~~~~~~~~

Header section comes first in **WScript** and cannot be empty.

.. list-table:: Header section
   :widths: 8 6 6 80
   :header-rows: 1

   * - Key
     - Mandatory
     - Values
     - Description
   * - VERSION
     - No
     - Numeric
     - Version number, dependent on CCP4 Cloud version, for backward compatibility.
       Outdated versions will be reported when workflow is used. Default value:
       ``1.0``.
   * - DEBUG
     - No
     - ON/OFF
     - Flag to produce extended workflow log and diagnostics. Default value: 
       ``OFF``.
   * - COMMENTS
     - No
     - ON/OFF
     - Flag to produce additional comments such as results of *LET* statements
       in workflow log. Default value: ``ON``.
   * - WID
     - Yes/No
     - String
     - Workflow ID which **must be given** when workflow is used in *Import* task
       or via **CloudRun** utility. Ignored if workflow is used as task included
       in **My Workflows** section of the **Task List**. Default value is not set.
   * - NAME
     - No
     - String
     - Workflow name which identifies workflow task in **Job Tree**; can contain
       several space-separated words if necessary. Default value: ``Workflow``.
   * - ONAME
     - No
     - String
     - Alphanumeric word used to name data objects created by the *Workflow* task.
       Default value: ``workflow``.
   * - TITLE
     - No
     - String
     - Workflow title which identifies workflow task in **Task List** and
       report pages; can contain several space-separated words if necessary.
       Default value: ``Workflow``.
   * - DESC
     - No
     - String
     - Workflow description which appears in small font under the workflow title
       in **Task List** and report pages; can contain several space-separated 
       words if necessary. Default value: ``custom workflow``.
   * - ICON
     - No
     - String
     - Colour code for workflow's icon, which can help to organise 
       **My Workflows** section in **Task List**. Available codes include:
       ``Aqua``, ``Asparagus``, ``Black``, ``Gold``, ``Grape``, ``Lavender``,
       ``Maraschino``, ``Maroon``, ``Mocha``, ``Pink``, ``Salmon``, ``Spring``,
       ``Tangerine``, ``Teal``, ``Tin``. Default value: ``Aqua``.
   * - KEYWORDS
     - No
     - String
     - Space-separated listr of keywords to be used in **A-Z** tab of
       **Task List** for keyword-based task searches. Default value:
       ``workflow``.
   * - ALLOW_UPLOAD
     - No
     - 
     - If given, this keyword creates file upload widgets, which are used
       instead of object selection widgets when workflow task is invoked from
       the root of **Job Tree**. This keyword should not be used if workflow
       cannot be run from the root (for example, if it uses *Structure Revision* 
       as one input data type).


.. _wscript_reference_input_data:

~~~~~~~~~~~~~~~~~~
Input data section
~~~~~~~~~~~~~~~~~~

Input data section must follow :ref:`wscript_reference_header` and cannot 
be empty. The section may contain only ``DATA`` and ``!DATA`` statements, where
exclamation mark means that data input is mandatory. One ``DATA`` statement
creates a single graphical widget, which can take specified data objects. The
statement has the following syntax: ::

    DATA object(s) [TYPES subtype(s)]

where the ``TYPES`` part is optional.

.. list-table:: Header section: data objects
   :widths: 15 85
   :header-rows: 1

   * - Object name
     - Description
   * - UNMERGED
     - Unmerged reflection dataset
   * - HKL
     - Merged reflection dataset
   * - XYZ
     - Structure model coordinates
   * - SEQ
     - Macromolecular sequence
   * - LIBRARY
     - Crystallographic restraints' library for non-standard residues and
       ligands not found in CCP4 Monomer Library
   * - LIGAND
     - Ligand descriptions for fitting in electron density. This will create
       graphical widgets for specifying either a SMILES string, 3-letter ligand
       code or upload a ``.cif`` file with ligand descriptions.


.. list-table:: Header section: data objects subtypes
   :widths: 15 85
   :header-rows: 1

   * - Subtype name
     - Description
   * - anomalous
     - Reflection dataset with anomalous scattering
   * - protein
     - Structure coordinates or sequence corresponding to an amino acid chain
   * - RNA
     - Structure coordinates or sequence corresponding to a ribonucleic acid
       chain
   * - DNA
     - Structure coordinates or sequence corresponding to a deoxyribonucleic
       acid chain

Examples: ::

    # Mandatory input of either unmerged or merged reflection dataset
    # containing anomalous signal
    !DATA UNMERGED HKL TYPES anomalous

    # Optional input of protein structure model
    DATA XYZ TYPES protein

    # Mandatory input of sequence of any type
    !DATA SEQ

    # Mandatory input of sequence of any type (alternative)
    !DATA SEQ TYPES protein dna rna


.. _wscript_reference_input_parameters:

~~~~~~~~~~~~~~~~~~~~~~~~
Input parameters section
~~~~~~~~~~~~~~~~~~~~~~~~

Input parameters section is optional. If used, it must follow
:ref:`wscript_reference_input_data`. The section is made of principal
statements ``PAR_*`` or ``!PAR_*`` followed by their specifications. The leading 
exclamation mark means that user's input is mandatory and the corresponding
parameter cannot have a default value. On contrary, ``PAR_*`` statements must 
have a default parameter specified. The exclamation mark cannot be applied in
case of ``PAR_CHECK`` and ``PAR_COMBO`` parameters, which always have a
default value.

.. list-table:: Principal parameter statements
   :widths: 8 10 82
   :header-rows: 1

   * - Key
     - Value
     - Description
   * - PAR_INTEGER
     - variable's name
     - Creates graphical widget for integer number input. The input is assigned
       to internal workflow variable with specified name, which is created
       automatically.
   * - PAR_REAL
     - variable's name
     - Creates graphical widget for real number input. The input is assigned to
       internal workflow variable with specified name, which is created
       automatically.
   * - PAR_STRING
     - variable's name
     - Creates graphical widget for string value input (such as atom name of
       anomalous scatterer). The input is assigned to internal workflow variable
       with specified name, which is created automatically.
   * - PAR_CHECK
     - variable's name
     - Creates graphical widget for a checkbox input. The input (``True/False`` 
       for checked/unchecked states, respectively) is assigned to internal 
       workflow variable with specified name, which is created automatically.
       PAR_CHECK cannot be preceded with the exclamation sign, and it always 
       has a default value (unchecked if not specified).
   * - PAR_COMBO
     - variable's name
     - Creates graphical widget for combobox input. The input (value associated
       with the selected combobox item) is assigned to internal workflow variable
       with specified name, which is created automatically. PAR_COMBO cannot be
       preceded with the exclamation sign, and it always has a default value
       (first item if not specified).


.. list-table:: Input parameters specifications
   :widths: 8 8 8 76
   :header-rows: 1

   * - Key
     - Value
     - Mandatory
     - Description
   * - LABEL
     - String
     - yes
     - Descriptive label for input widget, could be several space-separated
       words. Example: ``Number of refinement cycles``.
   * - TOOLTIP
     - String
     - no
     - Extend description for input widget, which appears on mouse hovering 
       over widget's fields. Could be several space-separated words.
   * - IWIDTH
     - number
     - no
     - Width of input widget's active field, in pixels. Default values depend 
       on the widget type and should be suitable in most cases.
   * - MAXLENGTH
     - number
     - no
     - Maximum number of input characters in ``PAR_STRING`` widget (unlimited
       by default)
   * - RANGE
     - 2 numbers
     - no
     - Minimum and maximum acceptable values for ``PAR_INTEGER`` and
       ``PAR_REAL`` widgets, space-separated. If only one limit should be used,
       the other limit should be represented by asterisk ``*``. For example,
       ``RANGE  1 *`` means that value cannot be less than 1 but no upper limit.
   * - OPTION
     - word and string
     - yes
     - Selection item for ``PAR_COMBO`` widget. Statement's value consists of a 
       key and text string, which is displayed as a selectable string in the
       combobox. If string is selected by user, widget's variable is assigned
       the corresponding key. For example, ``OPTION A Choose option A`` will
       put line ``Choose option A`` in the combobox. If this line is selected,
       combobox's value is string ``"A"``.
   * - DEFAULT
     - String or number
     - yes/no
     - Default value for widget/parameter. This statement is mandatory if
       widget is described with leading exclamation sign, *e.g.*, ``!PAR_REAL``.
       For ``PAR_COMBO``, default value must be one of keys listed in
       ``OPTION`` statements.

Examples: ::

    !PAR_REAL     resHigh  # name to be used in workflow's expressions
        LABEL     High resolution cut-off (&Aring;)
        TOOLTIP   High resolution cut-off, angstrom
        IWIDTH    40       # input field width is set to 40 pixels
        RANGE     0.1 5.0  # allowed min/max values
        DEFAULT   1.5      # default real value

    PAR_COMBO     useBFactors   # name to be used in workflow's expressions
        LABEL     Use isotropic B-factors
        TOOLTIP   B-factor mode for refinement
        IWIDTH    60            # combobox width is set to 60 pixels
        OPTION    none  Select from list  # value "none" text "Select from list"
        OPTION    yes   Yes               # value "yes"  text "Yes"
        OPTION    no    No                # value "no"  text  "No"
        DEFAULT   none                    # default string value "none"

    PAR_CHECK     reqValReport  # name to be used in workflow's expressions
        LABEL     Request PDB Validation Report
        TOOLTIP   Check to prepare PDB deposition files and validation report
        DEFAULT   Unchecked


.. _wscript_reference_workflow_body:

~~~~~~~~~~~~~~~~~~~~~
Workflow body section
~~~~~~~~~~~~~~~~~~~~~

Workflow body must be the last section in **WScript** file. It may contain
task run instructions, variables and workflow control statements.

Task run instructions represent a set of statements which starts with *Run Name*
statement and finishes with *Run* statenment: ::

    @RUN_NAME
        # ... other optional statements ...
        RUN  TaskName

The most convenient way of making run instruction is through using the 
**Workflow Creator**, as described in :ref:`simple_mr_workflow` with many
examples and explanations. Therefore, here only the reference of relevant 
statements is provided.

.. list-table:: Task run statements
   :widths: 8 18 74
   :header-rows: 1

   * - Key
     - Parameters
     - Description
   * - @RUN_NAME
     - None
     - Unique name, which opens the set of relevant statements and is used 
       for referencing task in looping and branching
   * - @RUN_NAME[x]
     - None
     - Same as ``@RUN_NAME`` but modified with the value of variable ``x``.
       Such modification is used in loops and branching, see examples in
       :ref:`simple_mr_workflow`.
   * - IF
     - expression
     - Instructs to run the task only if ``expression`` evaluates to ``True``,
       for example, ``IF  Rfree<0.4``.
   * - IFDATA
     - data type
     - Instructs to run the task only if data of specified type is present.
       data type should be given as a lowercase of data types used in ``DATA``
       statements in :ref:`wscript_reference_input_data`, for example,
       ``hkl``, ``unmerged``, ``xyz``, ``seq``, ``library``, ``ligand``.
   * - IFNOTDATA
     - data type
     - Instructs to run the task only if data of specified type is *NOT* present.
       data type should be given as a lowercase of data types used in ``DATA``
       statements in :ref:`wscript_reference_input_data`, for example,
       ``hkl``, ``unmerged``, ``xyz``, ``seq``, ``library``, ``ligand``.
   * - DATA
     - data id and data name
     - Forces placement of specified data in particular item of CCP4 Cloud task.
       This is necessary when task interface has "not standard" data id, or
       when task does not use Structure Revision that is already in the branch. 
       
       Example 1. *Aimless* task
       assumes input of merged or unmerged reflections for symmetry reference in
       data object with id ``ds0``. This id is not recognised automatically as a
       recipient of reflection data, therefore, statement ``DATA ds0 unmerged`` 
       or ``DATA ds0 hkl`` must be placed in task instructions for *Aimless*: ::

          @AIMLESS
              IFDATA    unmerged
              DATA      ds0  unmerged
              RUN Aimless

       Example 2. Sequence alignment task expects input of mixed objects, such
       as sequences and models, in a single field named ``seq``. The corresponding
       description is as follows: ::

          @SEQALIGN
              DATA seq seq
              DATA seq xyz
              RUN SeqAlign

       Example 3. Dimple-MR takes merged reflections and atomic coordinates 
       rather than Structure Revision: ::

          @DIMPLEMR
              DATA hkl hkl
              DATA xyz xyz
              RUN DimpleMR

   * - ALIAS
     - standard data id and task data id
     - Used in cases when data id, used in task interface, is not "standard",
       such as ``revision``, ``hkl``, ``seq``, ``xyz`` and similar. Example:
       ``ALIAS  revision istruct`` (for *XyzUtils*).
   * - USE
     - data name and number / variable / expression
     - Used for data object specification in cases when several data objects
       with given name are available. For example, *Crank-2* creates up to 4 
       *Structure Revisions* after MAD phasing, and the following statement:
       ``USE REVISION 2`` could be used in next task description in order to
       force using 2nd revision produced.
   * - PROPERTY
     - data name, property id and property value
     - Used for modifying properties of data objects. For example,
       ``PROPERTY HKL res_high 1.4`` request cutting reflection dataset to 
       1.4A in *Change Resolution* task; ``PROPERTY REVISION>HKL wtype "peak"``
       sets string value ``"peak"`` (not to be mistaken with ``peak`` variable,
       therefore, enquoted) for the wavelength type in *Crank-2* or *ShelxCD*. 
   * - PARAMETER
     - parameter id and value (expression)
     - Assigns the specified value (or result of specified expression) to
       task parameter with specified id. Parameters ids coincide with keys in
       "parameters" structure of the corrsponding task class. Example:
       ``PARAMETER VDW_VAL 2.0`` (for *Refmac*).
   * - USE_SUGGESTED_PARAMETERS
     - none
     - Forces using parameters suggested based on results of previous task of
       the same types. Currently, this is applicable only to *Refmac*.
   * - RUN
     - Task name
     - Gives the name of CCP4 Cloud task that must be run, and finishes the set
       of task run statements.


.. list-table:: Workflow variables and control
   :widths: 8 92
   :header-rows: 1

   * - Operator
     - Description

   * - let x = *expression* [if *condition*]
     - Variable assignment, for example: ::

           let x = 1

       Several assignments can be placed in a single statement: ::

           let x = 1; y = sin(PI/4); z = x+y

       The whole statement may be made conditional: ::

           let x = 1; y = sin(PI/4); z = x+y if Rfree<0.3

   * - repeat @RUN_NAME while *condition*
     - Instruction to repeat the specified task while *condition* evaluates to
       *True*, for example: ::

           repeat @REFINEMENT while Rfree>0.4 and iter<10

       .. note::
          Task, used in ``repeat`` statement, should be described with modificator,
          *e.g.*, ``@REFINEMENT[iter]``, and modificator should be advanced
          within the repeat loop scope, *e.g.*, ``let iter = iter + 1``. Always
          limit the maximum number of repeats (10 in the above example) to avoid 
          infinite looping. Note that ``@RUN_NAME`` is specified without 
          modificator in ``repeat`` statement.

   * - branch @RUN_NAME [if *condition*]
     - Instruction to continue next task from the specified task, for example: ::

           branch @MODEL_BUILDING-1

       If task was described with modificator, it *must be* explicitly specified
       as a variable with correct value: ::  

           branch @DENSITY_MODIFICATION[hand0]

       Branching may be subject to *condition*, evaluated to *True*::

           branch @MODEL_BUILDING-2 if Rfree>0.4

   * - continue @RUN_NAME [if *condition*]
     - Instruction to continue the workflow from the specified task, for example: ::

           continue @REFINEMENT

       continuation may be subject to *condition*, evaluated to *True*::

           continue @REFINEMENT if Rfree>0.4

   * - POINT @RUN_NAME
     - Marks point in the workflow which can be used in ``continue`` (and only 
       in ``continue``). There are no actions associated with this operator.

   * - PARALLEL ON|OFF
     - Tasks found between ``PARALLEL ON`` and ``PARALLEL OFF`` statements will
       be executed in parallel. Each such task will start a new branch, and 
       statements after ``PARALLEL OFF`` will be applied in each branch. Therefore,
       parallel tasks should produce compatible output.

   * - PRINT_VAR
     - Prints current values of all workflow variables in CCP4 Cloud task's log
       file. example: ::

           PRINT_VAR  Rfactor

   * - checkTask(name)
     - Queries task availability and assignes ``True/False`` to variable
       ``name_available``, for example: ::

           checkTask(StructurePrediction)
           PRINT_VAR   StructurePrediction_available
           continue  @AUTO_MR if not StructurePrediction_available 

   * - STOP [if *condition*]
     - Stops the workflow. If condition is given, then workflow is stopped if
       *condition* evaluates ``True``, for example: ::

           STOP if Rfree<0.22

   * - END
     - Ends the workflow.


.. _wscript_reference_predefined_variables:

~~~~~~~~~~~~~~~~~~~~~
Pre-defined variables
~~~~~~~~~~~~~~~~~~~~~

**WScript** has direct access to certain metrics produced by tasks through
pre-defined variables. For example, *R_free* value produced by *Refmac* is
assigned to variable ``Rfree``.

.. list-table:: Pre-defined variables
   :widths: 8 18 74
   :header-rows: 1

   * - Variable
     - Producing tasks
     - Description
   * - nasu
     - ASU Definition
     - Predicted number of monomeric units in ASU.
   * - nfitted
     - PhaserMR Molrep
     - Number of fitted (molecular replaced) monomeric units in ASU.
   * - Rfree
     - All tasks with refinement
     - Free R-factor (varies between 0 and 1).
   * - Rfactor
     - All tasks with refinement
     - Work R-factor (varies between 0 and 1).
   * - suggested
     - Refmac
     - Number of suggested parameters to change.
   * - N_unmerged
     - Workflow
     - Number of unmerged datasets given to workflow by user.
   * - N_hkl
     - Workflow, Aimless
     - Number of merged datasets given to workflow by user or produced by ``Aimless``.
   * - N_hkl_anom
     - Workflow, Aimless
     - Number of merged datasets with anomalous signal, given to workflow by user or produced by ``Aimless``.
   * - N_seq
     - Workflow
     - Number of sequences given to workflow by user.
   * - N_xyz
     - Workflow
     - Number of molecular models given to workflow by user.
   * - N_lig
     - Workflow, MakeLigand
     - Number of ligand files given to workflow by user or produced by ``MakeLigand``.
   * - N_ligdesc
     - Workflow
     - Number of ligand descriptinos defined by user in workflow's input section.
   * - N_lib
     - Workflow
     - Number of ligand libraries given by user to workflow.


.. _wscript_reference_expression_syntax:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Mathematrical expressions syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**WScript** allows almost full range of *Python* mathematical expressions in
*LET* statements and conditional statements. Available functions and operators 
are listed in this section.

.. list-table:: Operator precedence
   :widths: 15 15 70
   :header-rows: 1

   * - Operator
     - Associativity
     - Description
   * - (...)
     - None
     - Grouping
   * - f(), x.y, a[i]
     - Left
     - Function call, property access, array indexing
   * - !
     - Left
     - Factorial
   * - ^
     - Right
     - Exponentiation
   * - +, -, not, sqrt, etc.
     - Right
     - Unary prefix operators (see below for the full list)
   * - \*, /, %
     - Left
     - Multiplication, division, remainder
   * - +, -, \|\|               
     - Left
     - Addition, subtraction, array/list concatenation
   * - ==, !=, >=, <=, >, <, in 
     - Left
     - Equals, not equals, etc. "in" means "is the left operand included in the right array operand?"
   * - and
     - Left
     - Logical AND
   * - or
     - Left
     - Logical OR
   * - x ? y : z
     - Right
     - Ternary conditional (if x then y else z)
   * - =
     - Right
     - Variable assignment
   * - ;
     - Left
     - Expression separator


.. list-table:: Unary operators
   :widths: 15 85
   :header-rows: 1

   * - Operator
     - Description
   * - -x
     - Negation
   * - +x
     - Unary plus. This converts it's operand to a number, but has no other effect.
   * - x!
     - Factorial (x * (x-1) * (x-2) * â€¦ * 2 * 1). gamma(x + 1) for non-integers.
   * - abs(x)
     - Absolute value (magnitude) of x
   * - acos(x)
     - Arc cosine of x (in radians)
   * - acosh(x)
     - Hyperbolic arc cosine of x (in radians)
   * - asin(x)
     - Arc sine of x (in radians)
   * - asinh(x)
     - Hyperbolic arc sine of x (in radians)
   * - atan(x)
     - Arc tangent of x (in radians)
   * - atanh(x)
     - Hyperbolic arc tangent of x (in radians)
   * - cbrt(x)
     - Cube root of x
   * - ceil(x)
     - Ceiling of x â€” the smallest integer thatâ€™s >= x
   * - cos(x)
     - Cosine of x (x is in radians)
   * - cosh(x)
     - Hyperbolic cosine of x (x is in radians)
   * - exp(x)
     - e^x (exponential/antilogarithm function with base e)
   * - expm1(x)
     - e^x - 1
   * - floor(x)
     - Floor of x â€” the largest integer thatâ€™s <= x
   * - length(x)
     - String or array length of x
   * - ln(x)
     - Natural logarithm of x
   * - log(x)
     - Natural logarithm of x (synonym for ln, not base-10)
   * - log10(x)
     - Base-10 logarithm of x
   * - log2(x)
     - Base-2 logarithm of x
   * - log1p(x)
     - Natural logarithm of (1 + x)
   * - not x
     - Logical NOT operator
   * - round(x)
     - X, rounded to the nearest integer, using "grade-school rounding"
   * - sign(x)
     - Sign of x (-1, 0, or 1 for negative, zero, or positive respectively)
   * - sin(x)
     - Sine of x (x is in radians)
   * - sinh(x)
     - Hyperbolic sine of x (x is in radians)
   * - sqrt(x)
     - Square root of x. Result is NaN (Not a Number) if x is negative.
   * - tan(x)
     - Tangent of x (x is in radians)
   * - tanh(x)
     - Hyperbolic tangent of x (x is in radians)
   * - trunc(x)
     - Integral part of a X, looks like floor(x) unless for negative number

.. list-table:: Pre-defined functions
   :widths: 17 83
   :header-rows: 1

   * - Function
     - Description
   * - random(n)
     - Get a random number in the range [0, n]. If n is zero, or not provided, it defaults to 1.
   * - fac(n)
     - n! (factorial of n: "n * (n-1) * (n-2) * â€¦ * 2 * 1") Deprecated. Use the ! operator instead.
   * - min(a,b,â€¦)
     - Get the smallest (minimum) number in the list.
   * - max(a,b,â€¦)
     - Get the largest (maximum) number in the list.
   * - hypot(a,b)
     - Hypotenuse, i.e. the square root of the sum of squares of its arguments.
   * - pyt(a, b)
     - Alias for hypot.
   * - pow(x, y)
     - Equivalent to x^y. For consistency with JavaScript's Math object.
   * - atan2(y, x)
     - Arc tangent of x/y. i.e. the angle between (0, 0) and (x, y) in radians.
   * - roundTo(x, n)
     - Rounds x to n places after the decimal point.
   * - map(f, a)
     - Array map: Pass each element of `a` the function `f`, and return an array of the results.
   * - fold(f, y, a)
     - Array fold: Fold/reduce array `a` into a single value, `y` by setting `y = f(y, x, index)` for each element `x` of the array.
   * - filter(f, a)
     - Array filter: Return an array containing only the values from `a` where `f(x, index)` is `true`.
   * - indexOf(x, a)
     - Return the first index of string or array `a` matching the value `x`, or `-1` if not found.
   * - join(sep, a)
     - Concatenate the elements of `a`, separated by `sep`.
   * - if(c, a, b)
     - Function form of c ? a : b. Note: This always evaluates both `a` and `b`, regardless of whether `c` is `true` or not. Use `c ? a : b` instead if there are side effects, or if evaluating the branches could be expensive.


.. list-table:: Constants
   :widths: 15 85
   :header-rows: 1

   * - Constant
     - Description
   * - E
     - The value of `Math.E` from your JavaScript runtime
   * - PI
     - The value of `Math.PI` from your JavaScript runtime
   * - True
     - Logical `true` value
   * - False
     - Logical `false` value
