===========
Data Import
===========


Data import is almost always the first task in any Project (only the **Make Ligand** task may be run without any data imported). There may be as many data imports in projects as necessary, however, it is usually a good idea to import all available experimental data, sequences and molecular coordinates in the very beginning.

*From user's perspective, CCP4 Cloud operates with data objects, rather than raw files. There are only 2 points where a user deals with actual files: (1) importing and (2) exporting data to/from CCP4 Cloud Project. Data objects correspond to entities that are passed from task to task as a whole. Therefore, for all tasks, except Data Import, require choice of data objects, rather than raw files. This is done in form of drop-down selectors, pre-filled with data objects, relevant to particular task and input field only*

-------------------------
CCP4 Cloud Data Managment
-------------------------

++++++++++++++++++
Data Object Naming
++++++++++++++++++

        **From user's perspective, CCP4 Cloud operates with data objects, rather than raw files. There are only 2 points where a user deals with actual files: (1) importing and (2) exporting data to/from CCP4 Cloud Project. Data objects correspond to entities that are passed from task to task as a whole.**

All data objects are named according to the following template:
``[NNNN-MM] name /type/subtype(s)``

where:

=============      ===========================================================================================================================================================================================================
    NNNN    	  	Serial number of job, which produced the data object                                                                                                                                                     
	MM	     	    Serial number of data object in the job, which produced it                                                                                                                                               
	name      		Given name, which can be derived either from the name of related file imported to the Project, or from program or task name that created the respective data, or from the output id of the Job Dialog
	type     		Type of data object (see above)                                                                                                                                                                          
 subtype(s) 		Optional subtypes (see above)                                                                                                                                                                            
=============      ===========================================================================================================================================================================================================

++++++++++++++++++++++
Data Object Visibility
++++++++++++++++++++++

By default, each new job has access to data objects, imported or generated by all its parent jobs. For example:


    .. image:: images/doc.task.import1.png
        :scale: 50 %
    
    
job [0008] has access to data imported in job [0001], MR model(s) made in job [0002] and structures produced by jobs [0006] and [0007]. However, job [0008] cannot (by default) access structures produced by jobs [0003] and [0004] because they belong to a different branch of job tree.
If you may need to use data from different branches in a subsequent job. For example, you may want to structurally compare outputs of jobs [0005] and [0008] , using Gesamt software. This can be done by multiple selection of jobs, outcome of which needs to be used, and then right-clicking on one of them in order to add the new job through the dropdown menu


    .. image:: images/doc.task.import2.png
        :scale: 50 %
        
        
Choosing "Add job" from the dropdown menu will bring up the Task List Dialog, from which the "Structural comparison with Gesamt" task can be chosen. The new job will be added as a child to the right-clicked job ([0008] in the above Figure) and will see only data produced in jobs selected. 

++++++++++++++++++++++++++++++++++
Data Objects and Project Branching
++++++++++++++++++++++++++++++++++

Limitation of data visibility along branches of the job tree helps to keep the content of input data selectors in job dialogs as conscise and relevant as possible. For new jobs, CCP4 Cloud will always offer initially data settings based on most recenty generated data (in given branch of the job tree), as well as associated data. For example, a new refinement job will have, as initial setings, the most recently produced Structure Data and reflection dataset (HKL) used to produce it. However, you can always change these settings, e.g., in order to refine structure against another compatible dataset.

It is therefore clear that you want to grow your Project (the job tree) in such a way that needed data is always in the scope, and you do not have to resort to breaking the default behaviour by adjusting the data visibility scope with mutiple job selection. Following these principles will help to keep your projects in the most logical way, where the structure solution pathway can be easily identified (as a branch that led to best results).

The disadvantage of non-branching is the gradual lose of clarity of the structure solution process with growing number of trials, as well as growing inconvenience of dealing with long lists of input data to be chosen for new tasks. While these disadvantages do not seem to be dramatic in case of simple short projects, they may become critical in not so unusual case of projects having 100s of jobs.

CCP4 Cloud does not impose any specific rules for project branching. However, it may be convenient to branch when you:
    •	start working with a new crystal / reflection dataset
    •	start a new route of structure solution (e.g. trying to solve structure stage-by-stage after a failure of automated solvers)
    •	try another method of phasing (e.g. EP after MR); however, do not branch if you are planning a hybrid phasing, such as using MR phases in combination with those obtained from heavy atom location
    •	start working with new model for molecular replacement
    •	change the composition of asymmetric unit
    •	want to rerun the same job with different input parameters (job cloning)

    
------------
File formats 
------------

CCP4 Cloud operates with data objects, rather than raw files. There are only 2 points where a user deals with actual files: (1) importing and (2) exporting data to/from CCP4 Cloud Project. 
Import procedure automatically identifies the type of uploaded data and converts it into CCP4 Cloud's Data Objects


=====================  ==============================  ===========================================================================================================================================================================================================================================================================================================================================================================================  ===================
     
     Type                   File	                                                                                                             Description               	                                                                                                                                                                                                                                                                        CCP4 Cloud Object

=====================  ==============================  ===========================================================================================================================================================================================================================================================================================================================================================================================  ===================
 Unmerged reflections      .mtz,  .hkl                  All datasets found in uploaded files will be converted into individual Unmerged objects, complemented with symmetry metadata, used for subsequent merging and scaling. Useful properties of datasets, calculated with Pointless, will be presented in the output.	                                                                                                                             Unmerged
 Merged reflections           .mtz                      Merged reflections in CCP4 file format. All datasets found in uploaded files will be converted into individual HKL objects, complemented with FreeR flag columns (unless found in the file) and truncated if necessary. Useful properties of datasets, calculated with CTruncate, will be presented in the output.                                                                                  HKL
 Sequence                  .seq,  .pir,  .fasta           Macromolecular sequence.                                                                                                                                                                                                                                                                                                                                                                       Sequence  
 Coordinates             .pdb,  .cif,  .mmcif,  .ent    Macromolecular coordinates. Multi-chain files will be split into single chains and added as additional XYZ objects.                                                                                                                                                                                                                                                                               XYZ
=====================  ==============================  ===========================================================================================================================================================================================================================================================================================================================================================================================  ===================


---------------------
MTZ reflection format
---------------------

The MTZ file format is used for the storage of reflection data. The file contains the data and a header of metadata. The former is held as a table with rows representing reflections and columns representing different quantities for each reflection. The latter aims to make the file self-contained by including all necessary information, such as symmetry operations, cell dimensions, etc. The MTZ file is a flat-file representation of a particular data model. 


There are exist two different types of mtz files:

• **unmerged** is a file type in which original individual reflections are kept separate.

• **merged**  is file type in which all reflections merged from multiple measurements of symmetry equivalent reflections and also the different components of reflections that are partially recorded over a number of adjacent images. 

The file contains basically two classes of records - header records and reflection data records. 

    .. toggle-header::
        :header: A standard reflection data file contains the following **items:**
    
            VERS
                Version stamp   
    
            TITLE
                File Title - short identification of file 
        
            NCOL
                Number of columns, number of reflections in file, number of batches if number of batches > 0 this indicates multi-record file
        
            CELL
                Global Cell Parameters. The use of these is deprecated in favour of the dataset cell parameters.
        
            SORT
                Sort order of 1st 5 columns in file.
        
            SYMINF
                Number of Symmetry operations
                Number of Primitive operations 
                Lattice Type 
                Space Group Number 
                Space Group Name 
                Point Group Name 
        
            SYMM
                Symmetry operations 
        
            RESO
                Minimum and Max resolution stored as 1/d-squared 
        
            VALM
                Value with which Missing Number Flag is represented.
        
            COL
                Column Label 
                Column Type for each column
                Minimum and Maximum value in each column 
                ID of corresponding dataset 
        
            NDIF
                Number of datasets represented in the file.
        
            PROJECT
                ID of dataset 
                Project Name. Normally one for each structure determination.
        
            CRYSTAL
                ID of dataset 
                Crystal Name (may be several for each structure determination, representing the different crystals used).
        
            DATASET
                ID of dataset 
                Dataset Name (may be several for each structure determination, representing the different datasets measured).
        
            DCELL
                ID of dataset
                Cell dimensions (these are identical for all datasets belonging to the same crystal).
        
            DWAVEL
                ID of dataset 
                Wavelength (Real) for dataset.
        
            BATCH
             Batch Serial Number for each batch present. This line is only present in 'multi-record' files 


  
   
  
------------
The HKL file 
------------
A HKL file consists of x-ray reflections related to reflection planes (hkl) of the crystal lattice. Each of these planes obeys Bragg's equation. The experimental reflections are characterized by the indices h k l, a measured intensity I and its error sigma(I).  



