##!/usr/bin/python

#
# ============================================================================
#
#    27.12.19   <--  Date of Last Modification.
#                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ----------------------------------------------------------------------------
#
#  Citation Framework Functions
#
#  Copyright (C) Eugene Krissinel, Andrey Lebedev 2019
#
# ============================================================================
#

import sys
import math
import matplotlib.pyplot as plt
from   matplotlib.ticker import MultipleLocator

import gemmi

# ============================================================================


def makeRamPlot ( xyzpath, title, outimagepath ):

    st    = gemmi.read_structure ( xyzpath )
    model = st[0]
    x     = []
    y     = []
    for chain in model:
        for res in chain.get_polymer():
            # previous_residue() and next_residue() return previous/next
            # residue only if the residues are bonded. Otherwise -- None.
            prev_res = chain.previous_residue(res)
            next_res = chain.next_residue(res)
            if prev_res and next_res and next_res.name != 'PRO':
                v = gemmi.calculate_phi_psi ( prev_res, res, next_res )
                if not math.isnan(v[0]) and not math.isnan(v[1]):
                    x.append ( math.degrees(v[0]) )
                    y.append ( math.degrees(v[1]) )
                    print str(x[len(x)-1]) + "   " + str(y[len(x)-1])


    plt.figure ( figsize=(5.5, 5.5) )
    plt.title  ( title, fontsize=18 )
    plt.xlim   ( [-180, 180] )
    plt.ylim   ( [-180, 180] )
    ax = plt.gca()
    ax.xaxis.set_major_locator ( MultipleLocator(60) )
    ax.yaxis.set_major_locator ( MultipleLocator(60) )
    plt.xlabel (r'$\phi$', fontsize=16 )
    plt.ylabel (r'$\psi$', fontsize=16, labelpad=0 )
    plt.grid   ( color='#AAAAAA', linestyle='--' )
    #plt.hexbin ( x,y, gridsize=2*180, bins='log', cmap='Blues' )
    plt.scatter ( x,y, cmap='Blues', s=20 )
    if outimagepath:
        plt.savefig ( outimagepath, dpi=300 )  # dpi=70 for small images in docs
    else:
        plt.show()



    """
    try:
        ramas[res.name].append(v)
    except KeyError:
        pass
    """

makeRamPlot ( "4qo4.pdb","test","xxx.png" )



"""
def plot(data_file, label, output=None):
    x, y = [], []
    for line in open(data_file):
        phi, psi = line.split()
        if phi != 'nan' and psi != 'nan':
            x.append(float(phi))
            y.append(float(psi))
    print('Plotting %d points for %s' % (len(x), label))

    plt.figure(figsize=(5.5, 5.5))
    plt.title('%s, %d points.' % (label, len(x)), fontsize=12)
    plt.xlim([-180, 180])
    plt.ylim([-180, 180])
    ax = plt.gca()
    ax.xaxis.set_major_locator(MultipleLocator(60))
    ax.yaxis.set_major_locator(MultipleLocator(60))
    plt.xlabel(r'$\phi$', fontsize=14)
    plt.ylabel(r'$\psi$', fontsize=14, labelpad=0)
    plt.grid(color='#AAAAAA', linestyle='--')
    plt.hexbin(x, y, gridsize=2*180, bins='log', cmap='Blues')
    if output:
        plt.savefig(output, dpi=300)  # dpi=70 for small images in docs
    else:
        plt.show()
"""



"""
ramas = {aa: [] for aa in [
    'LEU', 'ALA', 'GLY', 'VAL', 'GLU', 'SER', 'LYS', 'ASP', 'THR', 'ILE',
    'ARG', 'PRO', 'ASN', 'PHE', 'GLN', 'TYR', 'HIS', 'MET', 'CYS', 'TRP']}

for path in gemmi.CoorFileWalk(sys.argv[1]):
    st = gemmi.read_structure(path)
    if 0.1 < st.resolution < 1.5:
        model = st[0]
        for chain in model:
            for res in chain.get_polymer():
                # previous_residue() and next_residue() return previous/next
                # residue only if the residues are bonded. Otherwise -- None.
                prev_res = chain.previous_residue(res)
                next_res = chain.next_residue(res)
                if prev_res and next_res and next_res.name != 'PRO':
                    v = gemmi.calculate_phi_psi(prev_res, res, next_res)
                    try:
                        ramas[res.name].append(v)
                    except KeyError:
                        pass

# Write data to files
for aa, data in ramas.items():
    with open('ramas/' + aa + '.tsv', 'w') as f:
        for phi, psi in data:
            f.write('%.4f\t%.4f\n' % (degrees(phi), degrees(psi)))
"""



"""
def plot(data_file, label, output=None):
    x, y = [], []
    for line in open(data_file):
        phi, psi = line.split()
        if phi != 'nan' and psi != 'nan':
            x.append(float(phi))
            y.append(float(psi))
    print('Plotting %d points for %s' % (len(x), label))

    plt.figure(figsize=(5.5, 5.5))
    plt.title('%s, %d points.' % (label, len(x)), fontsize=12)
    plt.xlim([-180, 180])
    plt.ylim([-180, 180])
    ax = plt.gca()
    ax.xaxis.set_major_locator(MultipleLocator(60))
    ax.yaxis.set_major_locator(MultipleLocator(60))
    plt.xlabel(r'$\phi$', fontsize=14)
    plt.ylabel(r'$\psi$', fontsize=14, labelpad=0)
    plt.grid(color='#AAAAAA', linestyle='--')
    plt.hexbin(x, y, gridsize=2*180, bins='log', cmap='Blues')
    if output:
        plt.savefig(output, dpi=300)  # dpi=70 for small images in docs
    else:
        plt.show()

for aa in sys.argv[1:]:
    plot('ramas/%s.tsv' % aa, aa)
    #plot('ramas/%s.tsv' % aa, aa, 'ramas/%s.png' % aa)
"""
